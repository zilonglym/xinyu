package com.graby.store.service.waybill;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.graby.store.base.StoreConstants;
import com.graby.store.entity.Centro;
import com.graby.store.entity.ShipOrder;
import com.graby.store.entity.ShipOrderDetail;
import com.graby.store.entity.SystemItem;
import com.graby.store.entity.Trade;
import com.graby.store.entity.User;
import com.graby.store.entity.enums.StoreSystemItemEnums;
import com.graby.store.service.base.CentroService;
import com.graby.store.service.base.UserService;
import com.graby.store.service.trade.TradeService;
import com.graby.store.service.wms.ShipOrderService;
import com.graby.store.service.wms.SystemItemService;
import com.graby.store.util.AddressUtil;
import com.taobao.api.DefaultTaobaoClient;
import com.taobao.api.TaobaoClient;
import com.taobao.api.domain.LogisticsService;
import com.taobao.api.domain.PackageItem;
import com.taobao.api.domain.PrintCheckInfo;
import com.taobao.api.domain.TradeOrderInfo;
import com.taobao.api.domain.WaybillAddress;
import com.taobao.api.domain.WaybillApplyCancelRequest;
import com.taobao.api.domain.WaybillApplyNewInfo;
import com.taobao.api.domain.WaybillApplyNewRequest;
import com.taobao.api.domain.WaybillApplyPrintCheckInfo;
import com.taobao.api.domain.WaybillApplyPrintCheckRequest;
import com.taobao.api.domain.WaybillDetailQueryRequest;
import com.taobao.api.request.WlbWaybillICancelRequest;
import com.taobao.api.request.WlbWaybillIGetRequest;
import com.taobao.api.request.WlbWaybillIPrintRequest;
import com.taobao.api.request.WlbWaybillIQuerydetailRequest;
import com.taobao.api.response.WlbWaybillICancelResponse;
import com.taobao.api.response.WlbWaybillIGetResponse;
import com.taobao.api.response.WlbWaybillIPrintResponse;
import com.taobao.api.response.WlbWaybillIQuerydetailResponse;


@Component
public class WayBillService {
	public static final Logger logger = Logger.getLogger(WayBillService.class);
	
	private String STO_ADDRESS="湘潭市岳塘区书院路街道新塘村申通快递总部";
	
	private String YUNDA_411353="双马镇金钢人防";
	
	@Autowired
	private SystemItemService systemItemService;
	
	@Autowired
	private ShipOrderService shipOrderService;
	
	@Autowired
	private TradeService tradeService;
	
	
	@Autowired
	private UserService  userService  ;
	
	
	@Autowired
	private CentroService  centroService  ;
	
	/**
	 * 测试环境地址
	 * 
	public static String appkey = "23012748";
	
	public static String secret = "1ef1ff93070d9be52f3bdd05adc10a02";
	 
	public static String url = "http://gw.api.tbsandbox.com/router/rest";
	
	public static String sessionKey = "6101503ab7b1d8aed17c7e52b2888bc5ba7b2e0a993fda72054718218";
	 * 
	 * */

	/**
	 * taobao.wlb.waybill.i.get 获取物流服务商电子面单号v1.0
	 * @param url
	 */
	public Map<String,String> billGet(Trade trade,String cpCode,String batchCode){
		
		
		Map<String,String>  retMap  = new HashMap<String, String>();
		TaobaoClient client = new DefaultTaobaoClient(StoreConstants.rookie_url, StoreConstants.rookie_appkey, StoreConstants.rookie_secret);
		WlbWaybillIGetRequest req = new WlbWaybillIGetRequest();

		WaybillApplyNewRequest waybillApplyNewRequest = new WaybillApplyNewRequest();
		
		
		
		
		Centro centro = centroService.findCentro(Long.valueOf(""+trade.getCentro().getId()));
		User user = userService.getUser(trade.getUser().getId());
		String  nameMsg   =  trade.getId()  +";";  //订单错误提示信息前缀
		// 面单详细信息
		/**
		 * 订单地址。。 发货地址
		 */
		ShipOrder shipOrder=this.shipOrderService.getSendShipOrderByTradeId(trade.getId());
		WaybillAddress address = new WaybillAddress();
		address.setArea(centro.getArea());
		address.setProvince(centro.getProvince());
		if(cpCode!=null && cpCode.equals("STO")){
			address.setAddressDetail(STO_ADDRESS);
		}else if(cpCode!=null && cpCode.equals("YUNDA411353")){
			address.setAddressDetail(YUNDA_411353);
			cpCode="YUNDA";
		}else{
			address.setAddressDetail(centro.getAddress());
		}
		
		waybillApplyNewRequest.setCpCode(cpCode);
		address.setCity(centro.getCity());
		
		waybillApplyNewRequest.setShippingAddress(address);

		List<TradeOrderInfo> tradeOrderInfoList = new ArrayList<TradeOrderInfo>();

		TradeOrderInfo tradeItem = new TradeOrderInfo();
		if(shipOrder.getItems()!=null && shipOrder.getItems().length()>50){
			tradeItem.setItemName(shipOrder.getItems().substring(0, 50));
		}else{
			tradeItem.setItemName(shipOrder.getItems());
		}
		nameMsg =nameMsg  + trade.getReceiverName();
		tradeItem.setConsigneeName(AddressUtil.cainiaoFormat(trade.getReceiverName()));// 收件人
		if(trade.getTradeFrom()!=null && trade.getTradeFrom()!=null && trade.getTradeFrom().equals(Trade.SourceFlag.SourceFlag_QM)){
			if(shipOrder.getSourcePlatformCode()!=null && shipOrder.getSourcePlatformCode().equals("TB")){
				tradeItem.setOrderChannelsType("TB");
			}else{
				tradeItem.setOrderChannelsType("OTHERS");
			}
		}else{
			tradeItem.setOrderChannelsType("TB");
		}
		List<String> tradeList = new ArrayList<String>();
		
		
//		if(shipOrder!=null && shipOrder.getSource()!=null &&  shipOrder.getSource().equals(Trade.SourceFlag.SourceFlag_QM)){
//			List<ShipOrderDetail> detailList=this.shipOrderService.getShipOrderDetailByOrderId(shipOrder.getId());
//			ShipOrderDetail detail=detailList.get(0);
//			tradeList.add(detail.getTradeOrderNo()==null || detail.getTradeOrderNo().length()==0 ? trade.getLgAgingType():""+detail.getTradeOrderNo());
//		}else{
//			tradeList.add( trade.getTradeFrom()==null || trade.getTradeFrom().length()==0 ? trade.getLgAgingType():""+trade.getTradeFrom());
//		}
		tradeList.add(String.valueOf(trade.getOtherOrderNo()));
		tradeItem.setTradeOrderList(tradeList);

		/**
		 * 如果手机号码为空，则传电话号码
		 */
		if(StringUtils.isNotEmpty(trade.getReceiverMobile())){
			nameMsg=  nameMsg  +":"+trade.getReceiverMobile()  ;
			tradeItem.setConsigneePhone(trade.getReceiverMobile());
		}else{
			nameMsg=  nameMsg  +":"+ trade.getReceiverPhone()  ;
			tradeItem.setConsigneePhone(trade.getReceiverPhone());
		}

		// 收货信息
		WaybillAddress address1 = new WaybillAddress();
		address1.setArea(trade.getReceiverDistrict());
		address1.setProvince(trade.getReceiverState()); // 省份
		// address.setTown(""); //城镇
		address1.setAddressDetail(AddressUtil.cainiaoFormat(trade.getReceiverAddress().replaceAll("/", "").replaceAll("\"", "").replaceAll("\\\\","").replaceAll("\'", "")));
		address1.setCity(trade.getReceiverCity());
		tradeItem.setConsigneeAddress(address1);
		

		tradeItem.setSendPhone(centro.getPhone());
		tradeItem.setWeight(100L);
		tradeItem.setSendName(user.getShopName());

		List<PackageItem> packageList = new ArrayList<PackageItem>();
		PackageItem packageItem = new PackageItem();
		if(shipOrder.getItems()!=null && shipOrder.getItems().length()>50){
			packageItem.setItemName(shipOrder.getItems().substring(0,50));
		}else{
			packageItem.setItemName(shipOrder.getItems());
		}
		packageItem.setCount(shipOrder.getTotalnum()==0?1L:Long.valueOf(shipOrder.getTotalnum()));
		packageList.add(packageItem);
		tradeItem.setPackageItems(packageList);

		List<LogisticsService> logisticsList = new ArrayList<LogisticsService>();
		LogisticsService logisticsItem = new LogisticsService();

		logisticsItem.setServiceValue4Json( "{\"value\": \"NORMAL\"}");
		logisticsItem.setServiceCode("SVC-DELIVERY-ENV");
		logisticsList.add(logisticsItem);
		tradeItem.setLogisticsServiceList(logisticsList);

		// 物流模式枚举
		tradeItem.setProductType("STANDARD_EXPRESS");
		
		tradeItem.setRealUserId(user.getTbUserId());
		
		tradeItem.setVolume(1L);
		tradeItem.setWeight(10L);
		//packageId
		tradeItem.setPackageId(String.valueOf(trade.getId()));
		tradeOrderInfoList.add(tradeItem);

		waybillApplyNewRequest.setTradeOrderInfoCols(tradeOrderInfoList);

		req.setWaybillApplyNewRequest(waybillApplyNewRequest);
		
	//	req.setWaybillApplyNewRequest("{'cp_code':'YTO','shipping_address':{'address_detail':'湖南省湘潭市岳塘区双拥南路25号高新创业园A3栋3楼星宇物流客服部','area':'岳塘区','city':'湘潭市','province':'湖南省'},'trade_order_info_cols':[{'consignee_address':{'address_detail':'重庆市九龙坡区石桥铺正街254号','area':'九龙坡区','city':'重庆市','province':'重庆'},'consignee_name':'谢黎','consignee_phone':'18716330842','logistics_service_list':[{'service_code':'SVC-DELIVERY-ENV','service_value4_json':'{\'value\': \'NORMAL\'}'}],'order_channels_type':'TB','package_id':'01 -1','package_items':[{'count':1,'item_name':'itemName0'}],'product_type':'STANDARD_EXPRESS','real_user_id':2599053189,'send_name':'xinyun乐器旗舰店','send_phone':'13500000000','trade_order_list':['1195085016717298'],'volume':1,'weight':10}]}");
		logger.debug(req.getTextParams());
		try {
			initSessionKey();
			WlbWaybillIGetResponse response = client.execute(req , StoreConstants.rookie_sessionKey);
			System.err.println("sessionKey:"+StoreConstants.rookie_sessionKey);
			retMap.put("message", "taobao.wlb.waybill.i.get 接口调用成功!");
			retMap.put("tradeId", ""+trade.getId());
			logger.debug("菜鸟面单返回:"+response.getBody());
			List<WaybillApplyNewInfo> waybillApplyNewCols = response.getWaybillApplyNewCols();
			if (waybillApplyNewCols != null  &&waybillApplyNewCols.size()>0){
					WaybillApplyNewInfo waybillApplyNewInfo = waybillApplyNewCols.get(0);
					try{
						
					//更新出库单状态
						ShipOrder sendShipOrder = shipOrderService.getSendShipOrderByTradeId(trade.getId());
						List<Map<String,String>> paramMapList =  new  ArrayList<Map<String,String>>();
						Map<String,String>  paramMap =  new HashMap<String, String>();
						paramMap.put("id", ""+sendShipOrder.getId());
						paramMap.put("expressCompany", cpCode);
						paramMap.put("expressOrderno", waybillApplyNewInfo.getWaybillCode());
						
						paramMap.put("status", ShipOrder.EntryOrderStatus.WAIT_EXPRESS_PICKING);
						
						//paramMap.put("status", ShipOrder.SendOrderStatus.WAIT_BUYER_RECEIVED);
						paramMap.put("orderFlag", waybillApplyNewInfo.getShortAddress());  //  大头
						paramMap.put("sellerMobile", waybillApplyNewInfo.getPackageCenterName()); //收货网点名称
						paramMap.put("sellerPhone", waybillApplyNewInfo.getPackageCenterCode());  //收货网点CODE
						paramMap.put("batchCode", batchCode);//打印批次号
						paramMapList.add(paramMap);
						shipOrderService.setSendOrderExpressAndStatusById(paramMapList);
						//更新订单状态
					//	tradeService.updateTradeStatus(trade.getId(), Trade.Status.TRADE_WAIT_EXPRESS_NOFITY);
						retMap.put("flag", "成功");
						retMap.put("orderNo", waybillApplyNewInfo.getWaybillCode());
						retMap.put("code", "200");
					}catch(Exception e){
						e.printStackTrace();
						retMap.put("flag", "接口调用成功,数据反写系统失败");
						retMap.put("code", "501");
						retMap.put("errorInfo", nameMsg  +";msg:"+"数据反写系统失败;"+e.getMessage());
					}
					
			}else{
				retMap.put("flag", "接口调用成功,返回数据为空");
				retMap.put("code", "502");
				retMap.put("errorInfo", nameMsg  +";msg:"+response.getBody());
			}
			
		} catch (Exception e) {
			retMap.put("flag", "接口调用失败");
			retMap.put("message", "taobao.wlb.waybill.i.get 接口调用失败!");
			retMap.put("code", "500");
			retMap.put("errorInfo",nameMsg  +";msg:"+"接口异常:"+e.getMessage());
			
			
		}
		return retMap;
	}
	
	

	/**
	 * taobao.wlb.waybill.i.cancel 商家取消获取的电子面单号v1.0
	 * @param url
	 */
	public Map<String,String> billCancel(Trade trade){
		
		TaobaoClient client = new DefaultTaobaoClient(StoreConstants.rookie_url, StoreConstants.rookie_appkey, StoreConstants.rookie_secret);
		
		Map<String,String>  retMap  = new HashMap<String, String>();
		ShipOrder sendShipOrder = shipOrderService.getSendShipOrderByTradeId(trade.getId());
		User user = userService.getUser(trade.getUser().getId());
		//{"cp_code": "POSTB",
		//"real_user_id": 89346737,
		//"trade_order_list": ["order"],
		//"waybill_code": "yourCode"}
		WlbWaybillICancelRequest req=new WlbWaybillICancelRequest();
		WaybillApplyCancelRequest cancel = new WaybillApplyCancelRequest();
		
		cancel.setCpCode(sendShipOrder.getExpressCompany());
		cancel.setRealUserId(user.getTbUserId());
		
		ShipOrder shipOrder=this.shipOrderService.getSendShipOrderByTradeId(trade.getId());
		List<String> orderList = new ArrayList<String>();
		
		if(shipOrder!=null){
			List<ShipOrderDetail> detailList=this.shipOrderService.getShipOrderDetailByOrderId(shipOrder.getId());
			ShipOrderDetail detail=detailList.get(0);
			orderList.add( detail.getTradeOrderNo()==null ? trade.getLgAgingType():""+detail.getTradeOrderNo());
		}else{
			orderList.add( trade.getTradeFrom()==null ? trade.getLgAgingType():""+trade.getTradeFrom());
		}
		
		
	//	orderList.add( trade.getTradeFrom()==null ? trade.getLgAgingType():""+trade.getTradeFrom());
		cancel.setTradeOrderList(orderList);
		cancel.setPackageId(String.valueOf(trade.getId()));
		cancel.setWaybillCode(sendShipOrder.getExpressOrderno());
		System.err.println("WaybillCode:"+sendShipOrder.getExpressOrderno());
		System.err.println("real_user_id:"+user.getTbUserId());
		System.err.println("cp_code:"+sendShipOrder.getExpressCompany());
		req.setWaybillApplyCancelRequest(cancel);
		System.err.println("订单取消:"+req.getTextParams());
		try {
			initSessionKey();
			WlbWaybillICancelResponse response = client.execute(req , StoreConstants.rookie_sessionKey);
			retMap.put("message", "taobao.wlb.waybill.i.cancel 接口调用成功!");
			retMap.put("tradeId", ""+trade.getId());
			System.out.println("response:"+response.getBody());
			if(response.isSuccess()){
				try {
					//更新还原状态
					List<Map<String,String>> paramMapList =  new  ArrayList<Map<String,String>>();
					Map<String,String>  paramMap =  new HashMap<String, String>();
					paramMap.put("id", ""+sendShipOrder.getId());
					paramMap.put("expressCompany", "");
					paramMap.put("expressOrderno", "");
					paramMap.put("status", ShipOrder.EntryOrderStatus.ENTRY_WAIT_STORAGE_RECEIVED);
					paramMap.put("orderFlag", "");  //  大头
					paramMap.put("sellerMobile", ""); //收货网点名称
					paramMap.put("sellerPhone", "");  //收货网点CODE
					paramMapList.add(paramMap);
					shipOrderService.setSendOrderExpressAndStatusById(paramMapList);
					//更新订单状态
					tradeService.updateTradeStatus(trade.getId(), Trade.Status.TRADE_WAIT_EXPRESS_SHIP);
					retMap.put("flag", "成功");
					retMap.put("code", "200");
				} catch (Exception e) {
					retMap.put("flag", "接口调用成功,反写单据状态失败");
					retMap.put("code", "501");
					e.printStackTrace();
				}
			}else{
				retMap.put("flag", "接口调用成功,无效单据或取消失败");
				retMap.put("code", "502");
				retMap.put("error", response.getBody());
			}
		} catch (Exception e) {
			e.printStackTrace();
			retMap.put("flag", "接口调用失败");
			retMap.put("message", "taobao.wlb.waybill.i.cancel 接口调用失败!");
			retMap.put("code", "500");
			e.printStackTrace();
		}
		return retMap;
	 }
	
	/**
	 * taobao.wlb.waybill.i.querydetail (查面单号状态v1.0)
	 * @param code 订单号
	 * @return 此订单号状态
	 */
	public Map<String,Object> querydetail(String code){
		TaobaoClient client = new DefaultTaobaoClient(StoreConstants.rookie_url, StoreConstants.rookie_appkey, StoreConstants.rookie_secret);
		WlbWaybillIQuerydetailRequest req = new WlbWaybillIQuerydetailRequest();
		WaybillDetailQueryRequest obj1 = new WaybillDetailQueryRequest();
		
		List<String> codeList=new ArrayList<String>();
		codeList.add(code);
		obj1.setWaybillCodes(codeList);
		//obj1.setCpCode("HTO");
		//obj1.setQueryBy(123L);
		//obj1.setTradeOrderList(codeList);
		req.setWaybillDetailQueryRequest(obj1);
		WlbWaybillIQuerydetailResponse rsp;
		System.out.println(req.getTextParams());
		initSessionKey();
		System.err.println("sessionKey"+StoreConstants.rookie_sessionKey);
		System.out.println("sessionKey"+StoreConstants.rookie_sessionKey);
		try {
			rsp = client.execute(req, StoreConstants.rookie_sessionKey);
			System.out.println(rsp.getBody());
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return null;
	}
	
	/**
	 * taobao.wlb.waybill.i.print 打印确认接口v1.0
	 * @param url
	 */
	public static void billPrint(Trade trade){
		TaobaoClient client=new DefaultTaobaoClient(StoreConstants.rookie_url, StoreConstants.rookie_appkey, StoreConstants.rookie_secret);
		WlbWaybillIPrintRequest req=new WlbWaybillIPrintRequest();
		WaybillApplyPrintCheckRequest waybillApplyPrintCheckRequest = new WaybillApplyPrintCheckRequest();
		List<PrintCheckInfo> printsList = new ArrayList<PrintCheckInfo>();
		
		
		//答应信息
		PrintCheckInfo print = new PrintCheckInfo();
		print.setShippingBranchCode("2323");
		print.setConsigneeName("张三");
		print.setSendPhone("12312312311");
		print.setWeight(123L);
		print.setWaybillCode("132121");
		
		WaybillAddress address = new WaybillAddress();
		address.setArea("朝阳区");
		address.setDivisionId(0L);
		address.setProvince("北京");
		address.setTown("八里庄");
		address.setAddressDetail("朝阳路高井，财满街，财经中心9号楼21单元6013");
		address.setCity("北京市");
		
		
		
		print.setProductType("Standard-Express");
		print.setSendName("李四");
		print.setConsigneeBranchCode("12321");
		
		print.setShippingAddress(address);
		
		
		
		//物流信息
		List<LogisticsService> logisticsList= new ArrayList<LogisticsService>();
		LogisticsService logistic = new LogisticsService();
		
		logistic.setServiceValue4Json("{ 'value': '100.00','currency': 'CNY','ensure_type': '0'}");
		logistic.setServiceCode("SVC-DELIVERY-ENV");
		
		logisticsList.add(logistic);
		
		print.setConsigneeBranchName("一网点");
		print.setShippingBranchName("二网点");
		print.setShortAddress("余杭");
		print.setVolume(123L);
		print.setConsigneePhone("13264528362");
		
		
		WaybillAddress address1 = new WaybillAddress();
		address1.setArea("朝阳区");
		address1.setDivisionId(0L);
		address1.setProvince("北京");
		address1.setTown("八里庄");
		address1.setAddressDetail("朝阳路高井，财满街，财经中心9号楼21单元6013");
		address1.setCity("北京市");
		
		print.setConsigneeAddress(address1);
		
		
		print.setRealUserId(123L);
		print.setPackageCenterCode("123456");
		print.setPackageCenterName("浙江杭州");
		
		
		waybillApplyPrintCheckRequest.setCpCode("HTK");
		
		print.setLogisticsServiceList(logisticsList);
		
		printsList.add(print);
		
		waybillApplyPrintCheckRequest.setPrintCheckInfoCols(printsList);
		
		req.setWaybillApplyPrintCheckRequest(waybillApplyPrintCheckRequest);
		try {
			WlbWaybillIPrintResponse response = client.execute(req , StoreConstants.rookie_sessionKey);
			
			List<WaybillApplyPrintCheckInfo> printInfoList = response.getWaybillApplyPrintCheckInfos();
			
			if(printInfoList!=null){
				for(int  i = 0 , size  = printInfoList.size();i<size;i++){
					WaybillApplyPrintCheckInfo printInfo = printInfoList.get(i);
//					printInfo.get
					
				}
			}
			System.out.println(response.getBody());
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
/*	
	private static String appId="00005331";
	private static String appKey="995D0F2BD5966F7C585FC24E21E62ECB";
	
	public static void testprinter() throws Exception{
		 URL myURL = new URL("http://127.0.0.1:4040/sf/waybill/print?type=poster_100mm150mm&output=print");
		 //其中127.0.0.1:4040为打印服务部署的地址（端口如未指定，默认为4040），
		 //type为模板类型（支持两联尺寸为 100mm*150mm）
		 //A5 poster_100mm150mm   
		 //output为输出类型,值为print或image，如不传，
		 //默认为print（print 表示直接打印，image表示获取图片的BASE64编码字符串）
		
		HttpURLConnection httpConn = (HttpURLConnection) myURL.openConnection();
		httpConn.setDoOutput(true);
		httpConn.setDoInput(true);
		httpConn.setUseCaches(false);
		httpConn.setRequestMethod("POST");
		httpConn.setRequestProperty("Content-Type", "application/json;charset=utf-8");
		httpConn.setConnectTimeout(15000);
		httpConn.setReadTimeout(3 * 5000);
		
		List<WaybillDto> waybillDtoList = new ArrayList<WaybillDto>();
		
		
		WaybillDto dto = new WaybillDto();
		dto.setAppId(appId);
		dto.setAppKey(appKey);
		dto.setMailNo("755123457777");
		//dto.setMailNo("120000000001,001000000002");//子母单方式
		
		
		dto.setCodValue("200");// 代收货款价值
		
		//收件人信息  
		dto.setConsignerProvince("广东省");
		dto.setConsignerCity("深圳市");
		dto.setConsignerCounty("南山");
		dto.setConsignerAddress("学府路软件产业基地2B12楼"); //详细地址限制最多23个字  字段过长影响打印效果
		dto.setConsignerCompany("顺丰科技");
		dto.setConsignerMobile("15820456987");
		dto.setConsignerName("丰仔");
		dto.setConsignerShipperCode("5180000");
		dto.setConsignerTel("0755-33066758");
		System.err.println(dto.getConsignerAddress().length());
		
		//寄件人信息
		dto.setDeliverProvince("浙江省");
		dto.setDeliverCity("杭州市");
		dto.setDeliverCounty("拱墅区");
		dto.setDeliverCompany("神罗科技集团有限公司");
		dto.setDeliverAddress("舟山东路5199号");
		dto.setDeliverName("扎克斯");
		dto.setDeliverMobile("15889379999");
		dto.setDeliverShipperCode("310000");
		dto.setDeliverTel("0571-26508888");
		
		
		dto.setDestCode("571");//目的地代码
		dto.setZipCode("571");//原寄地代码
		
		dto.setExpressType(3);//1 ：标准快递   2.顺丰特惠   3： 电商特惠  7.电商速配   15：生鲜速配
		
		
		dto.setInsureValue("400");//声明保价价值 
		dto.setMonthAccount("7550385912");// 月结卡号 
		dto.setOrderNo("SFAPI00000000000000099");
		dto.setPayMethod(1);//
		
		
		//打印在电子运单上的商户logo，可以采用本地路径，也可以使用远程地址路径，
		//如http://www.sf-express.com/.galleries/logoSC.png
	   
		
		dto.setLogo("d:/sf/sflogo.jpg");
		dto.setSftelLogo("d:/sf/95338-openAPI.jpg");

		
		CargoInfoDto cargo = new CargoInfoDto();
		cargo.setCargo("文件");
		cargo.setCargoCount(1);
		cargo.setCargoUnit("件");
		cargo.setSku("00015645");
		cargo.setRemark("重要文件");
		
		CargoInfoDto cargo2 = new CargoInfoDto();
		cargo2.setCargoCount(1);
		cargo2.setCargo("文件2");
		cargo2.setCargoUnit("件");
		cargo2.setSku("00015646");
		cargo2.setRemark("重要文件");
		
		List<CargoInfoDto> cargoInfoList = new ArrayList<CargoInfoDto>();
		cargoInfoList.add(cargo2);
		cargoInfoList.add(cargo);
		
		dto.setCargoInfoDtoList(cargoInfoList);
		waybillDtoList.add(dto);
		ObjectMapper objectMapper = new ObjectMapper();
		StringWriter stringWriter = new StringWriter();
		objectMapper.writeValue(stringWriter,waybillDtoList);
		System.err.println(stringWriter.toString());
		httpConn.getOutputStream().write(stringWriter.toString().getBytes());
		httpConn.getOutputStream().flush();
		httpConn.getOutputStream().close();
		InputStream in = httpConn.getInputStream();

		
		   BufferedReader in2=new BufferedReader(new InputStreamReader(in));
		   String y="";
		   
		   while((y=in2.readLine())!=null){//一行一行读
		         System.out.println(y);
		   }
		
           	System.exit(0);
	}
	public static void main(String[] args) {
		try {
			WayBillService.testprinter();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	*/
	private void initSessionKey(){
		
		Map<String,Object> params=new HashMap<String,Object>();
		String type=StoreSystemItemEnums.SESSIONKEY.getKey();
		List<SystemItem> itemList= this.systemItemService.findSystemItemByType(type);
		SystemItem item=itemList.get(0);
		String sessionKey=item.getValue();
		StoreConstants.rookie_sessionKey=sessionKey;
	}

		
}
