package com.graby.store.admin.web;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import com.graby.store.base.MemcachedManager;
import com.graby.store.base.StoreConstants;
import com.graby.store.entity.CheckOut;
import com.graby.store.entity.Item;
import com.graby.store.entity.ShipOrder;
import com.graby.store.entity.ShipOrderDetail;
import com.graby.store.entity.ShipOrderReturn;
import com.graby.store.entity.User;
import com.graby.store.remote.CheckRemote;
import com.graby.store.remote.ItemRemote;
import com.graby.store.remote.ShipOrderRemote;
import com.graby.store.remote.ShipOrderReturnRemote;
import com.graby.store.remote.UserRemote;

/**
 * 缓存控制类
 * 
 * @author yangmin 2017年8月17日
 *
 */
@Lazy(false)
@Controller
@RequestMapping(value = "memcached")
public class MemcachedController extends BaseController {

	public static final Logger logger = Logger.getLogger(MemcachedController.class);
	@Autowired
	private ShipOrderReturnRemote orderReturnRemote;
	@Autowired
	private ShipOrderRemote shipOrderRemote;
	@Autowired
	private CheckRemote checkRemote;
	@Autowired
	private UserRemote userRemote;
	@Autowired
	private ItemRemote itemRemote;

	public final static String memcached_checkOut = "CheckOut";

	public final static String memcached_success_CheckOut = "success";

	public final static String memcached_item = "Item";
	public final static String memcached_user = "User";

	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

	/**
	 * 初始化缓存信息
	 */
	@RequestMapping(value = "init")
	public void initMemcached() {
		logger.error("缓存初始化开始！");
		MemcachedManager manager=new MemcachedManager();
		// 初始化缓存
		// MemcachedManager.
		int index = 0;
		// 1.取退货信息
		Map<String, Object> params = new HashMap<String, Object>();
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(new Date());
		calendar.set(Calendar.DAY_OF_MONTH, calendar.get(Calendar.DAY_OF_MONTH) - 7);// 让日期加1
		params.put("beigainTime", sdf.format(calendar.getTime()));
		params.put("lastTime", sdf.format(new Date()));
		List<ShipOrderReturn> returnList = this.orderReturnRemote.findShipOrderByexpress(params);
		for (int i = 0; i < returnList.size(); i++) {
			ShipOrderReturn orderReturn = returnList.get(i);
			if (StringUtils.isNotEmpty(orderReturn.getExpressOrderno())) {
				index++;
				manager.put(StoreConstants.memcached_return + orderReturn.getExpressOrderno(),
						orderReturn.getExpressOrderno());
			}
		}
		logger.error("退货信息处理完毕!" + index);
		// 2.取未出库的订单信息
	
		// 3.取最近两天的验货信息,只取成功的，为的是重复扫描的判断
		params.clear();
		Calendar cal = Calendar.getInstance();
		cal.setTime(new Date());
		String startDate = sdf.format(cal.getTime());
		cal.add(Calendar.DATE, -3);
		String endDate = sdf.format(cal.getTime());
		params.put("startDate", startDate);
		params.put("endDate", endDate);
		params.put("status", "SUCCESS");
		List<CheckOut> checkList = this.checkRemote.findCheckOut(params);
		for (int i = 0; i < checkList.size(); i++) {
			CheckOut out = checkList.get(i);
			Map<String, Object> checkOut = new HashMap<String, Object>();
			checkOut.put(memcached_success_CheckOut + out.getOrderCode(), out.getOrderCode());
			manager.put(memcached_checkOut + out.getOrderCode(), checkOut);
			index++;
		}
		// 4.初始化所有的商品信息
		// 5.初始化所有的商家信息
		this.initItemAndUserInfo();
		logger.error("验货信息处理完毕，添加记录条数:" + index);
	}

	@RequestMapping(value="initShipOrder")
	public void initShipOrder(){
		int index=0;
		logger.error("订单信息初始化!");
		MemcachedManager manager=new MemcachedManager();
		Map<String, Object> params = new HashMap<String, Object>();
		Calendar cal = Calendar.getInstance();
		cal.setTime(new Date());
		String startDate = sdf.format(cal.getTime());
		cal.add(Calendar.DATE, -3);
		String endDate = sdf.format(cal.getTime());
		params.put("startDate", startDate);
		params.put("endDate", endDate);
		List<ShipOrder> orderList = shipOrderRemote.selectShipOrderNotEXISTS(params);
		for (int i = 0; i < orderList.size(); i++) {
			ShipOrder order = orderList.get(i);
			if (StringUtils.isNotEmpty(order.getExpressOrderno())) {
				ShipOrder tempOrder = this.shipOrderRemote.getShipOrder(order.getId());
				Map<String, Object> memcachedMap = new HashMap<String, Object>();
				for (int j = 0; j < tempOrder.getDetails().size(); j++) {
					ShipOrderDetail detail = tempOrder.getDetails().get(j);
					Item item = detail.getItem();
					memcachedMap.put(item.getBarCode(), detail.getNum());
				}
				index++;
				manager.put(order.getExpressOrderno(), memcachedMap);
			}
		}

		logger.error("订单信息处理完毕！" + index);
	}
	
	
	@RequestMapping(value = "itemInfo")
	public void initItemAndUserInfo() {
		MemcachedManager manager=new MemcachedManager();
		logger.error("初始化商品与商家信息");
		int index = 0;
		Map<String, Object> userMap = null;
		Map<String, Object> itemMap = null;
		List<User> userList = this.userRemote.findUsers();
		for (int i = 0; userList != null && i < userList.size(); i++) {
			User user = userList.get(i);
			userMap = new HashMap<String, Object>();
			userMap.put("id", user.getId());
			userMap.put("shopName", user.getShopName());
			userMap.put("code", user.getCode());
			userMap.put("tbUserId", user.getTbUserId());
			manager.put(memcached_user + user.getId(), userMap);
			index++;
		}
		logger.error("初始化商品信息:" + index);
		List<Item> itemList = this.itemRemote.getItemListByParams(null);
		for (int i = 0; i < itemList.size(); i++) {
			Item item = itemList.get(i);
			itemMap = new HashMap<String, Object>();
			itemMap.put("id", item.getId());
			itemMap.put("code", item.getCode());
			itemMap.put("title", item.getTitle());
			itemMap.put("sku", item.getSku());
			itemMap.put("userId", item.getUserid());
			itemMap.put("weight", item.getWeight());
			itemMap.put("packageWeight", item.getPackageWeight());
			itemMap.put("itemType", item.getItemType());

			manager.put(memcached_item + item.getBarCode(), itemMap);
			index++;
		}
		logger.error("商家与商品信息初始化完毕！" + index);

	}
	
	@RequestMapping(value="db")
	public void memcached_db(){
		try {
			this.memcachedCheckOut();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	// */5 * * * * ?
	// 0 */1 * * * ?
	// @Scheduled(cron="0 33/3 * * * ?")
	@Scheduled(cron = "0 */15 * * * ?")
	public void memcachedCheckOut() throws Exception {
		logger.error("定时器任务！");
		MemcachedManager manager=new MemcachedManager();
		try {
			List<Map<String, Object>> checkOutList = (List<Map<String, Object>>) manager.get(memcached_checkOut);
			List<CheckOut> outList = new ArrayList<CheckOut>();
			int index = checkOutList != null ? checkOutList.size() : 0;
			for (int i = index; i > 0; i--) {
				logger.error(i);
				Map<String, Object> map = checkOutList.get(i-1);
				String barCode = (String) map.get("barCode");
				String orderCode = (String) map.get("orderCode");
				String cp = (String) map.get("cpCode");
				String status = (String) map.get("status");
				String msg = (String) map.get("msg");
				Object obj=map.get("date");
				String date = null;
				if(obj instanceof java.util.Date){
					date=sdf.format(map.get("date"));
				}else{
					date=(String) map.get("date");
				}
				String personId=(String) map.get("personId");
				
				String itemName = (String) map.get("itemName");
				Object itemId=map.get("itemId");
				CheckOut check = new CheckOut();
				check.setBarCode(barCode);
				check.setCentroId(1L);
				check.setCpCompany(cp);
				check.setCreateDate(sdf.parse(date));
				check.setItemName(itemName);
				check.setMsg( msg);
				check.setOrderCode(orderCode);
				check.setPersonId(Long.valueOf(personId));
				check.setStatus(status);
				if(itemId!=null && itemId instanceof java.lang.Long){
					check.setItemId((Long) itemId);
				}else if (itemId instanceof java.lang.String){
					if(StringUtils.isNotEmpty((String)itemId)){
						check.setItemId(Long.valueOf((String)itemId));
					}else{
						check.setItemId(0L);
					}
				}
				
				checkOutList.remove(map);
				outList.add(check);
			}
			manager.put(memcached_checkOut, checkOutList);
			this.checkRemote.saveCheckOutList(outList);
			logger.error("定时器保存数据" + outList.size());
		} catch (Exception e) {
			e.printStackTrace();
			logger.error(e.getMessage());
		}
		
	}

	public static void main(String[] args) {
	
		MemcachedManager manager=new MemcachedManager();
		List<Map<String, Object>> checkOutList = (List<Map<String, Object>>) manager.get(memcached_checkOut);
		Map<String,Object> map=(Map<String, Object>) manager.get("886174875048321527");
		System.err.println(map);
		System.err.println(checkOutList.size());
	}

}
