package com.xinyu.controller.task;

import java.io.UnsupportedEncodingException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.xinyu.common.BaseController;
import com.xinyu.dao.common.BaseDaoImpl;
import com.xinyu.model.base.Item;
import com.xinyu.model.base.RdsConstants;
import com.xinyu.model.base.ReceiverInfo;
import com.xinyu.model.base.User;
import com.xinyu.model.common.SessionUser;
import com.xinyu.model.system.Account;
import com.xinyu.model.system.SystemItem;
import com.xinyu.model.system.enums.OperatorModel;
import com.xinyu.model.system.enums.OrderStatusEnum;
import com.xinyu.model.trade.CheckOut;
import com.xinyu.model.trade.ShipOrder;
import com.xinyu.model.trade.ShipOrderOperator;
import com.xinyu.model.trade.WmsConsignOrderItem;
import com.xinyu.service.caoniao.WmsOrderStatusUploadCpImpl;
import com.xinyu.service.common.Constants;
import com.xinyu.service.system.AccountService;
import com.xinyu.service.system.CheckOutService;
import com.xinyu.service.system.ItemService;
import com.xinyu.service.system.SystemItemService;
import com.xinyu.service.system.UserService;
import com.xinyu.service.trade.ReceiverInfoService;
import com.xinyu.service.trade.ShipOrderOperatorService;
import com.xinyu.service.trade.ShipOrderService;
import com.xinyu.service.trade.WmsConsignOrderItemService;
import com.xinyu.service.util.HttpClientUtils;
import com.xinyu.service.util.IRedisProxy;
import com.xinyu.service.util.ObjectTranscoder;

@Lazy(value=false)
@Controller
@RequestMapping(value="redisTask")
public class RedisTask extends BaseController{
	
	private final static Logger logger = Logger.getLogger(RedisTask.class);
	
	@Autowired
	private IRedisProxy redisProxy;
	@Autowired
	private CheckOutService checkOutService;	
	@Autowired
	private WmsOrderStatusUploadCpImpl orderStatusUploadService;
	@Autowired
	private ShipOrderService shipOrderService;
	@Autowired
	private ShipOrderOperatorService operatorService;
	@Autowired
	private WmsConsignOrderItemService orderItemService;
	@Autowired
	private ItemService itemService;
	@Autowired
	private UserService userService;
	@Autowired
	private SystemItemService systemItemService;
	@Autowired
	private AccountService accountService;
	@Autowired
	private ReceiverInfoService receiverInfoService;
	
	private String Redis_Check_out_db="Check_out_db";
	private String Redis_Check_out_db_history="Check_out_history_db";
	
	private SimpleDateFormat ssdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	
	
	@RequestMapping(value="checkOutDb")
	public void saveCheckOut() throws Exception{
		this.checkOutDb();
	}
	
	@RequestMapping(value="checkOutNoUpdate")
	public void checkOutNoUpdate(){
		checkOutNoUpdateRedis();
	}
	
	@Scheduled(cron = "0 */15 * * * ?")
	public void checkOutDb() throws Exception{
		SimpleDateFormat sdf=new SimpleDateFormat("yyyyMMdd");
		String key=sdf.format(new Date());
		int i=0;
	/*	int v = 20180115;
		
			v++;
			String key=String.valueOf(v);
			*/
			String dbKeys=key+Redis_Check_out_db+"*";		
			Set<String> keys=this.redisProxy.keys(dbKeys);		
		
			 Map<String,String> map=null;
			for(Iterator<String> iterator = keys.iterator();iterator.hasNext();){  
	           String dbKey=iterator.next();
	           if(dbKey.indexOf("history")>0){
	        	   continue;
	           }
	            map=(Map<String, String>) ObjectTranscoder.deserialize(this.redisProxy.get(dbKey.getBytes()));
	           String barCode = (String) map.get("barCode");
				String orderCode = (String) map.get("orderCode");
				String cp = (String) map.get("cpCode");
				String status = (String) map.get("status");
				String msg = (String) map.get("msg");
				String orderId=(String) map.get("orderId");
				String orderDate=map.get("orderDate");
				Object obj=map.get("date");
				String accountId=map.get("accountId");
				String date = null;
				if(obj instanceof java.util.Date){
					date=sdf.format(map.get("date"));
				}else{
					date=(String) map.get("date");
				}
				String personId=(String) map.get("personId");
				String itemName = (String) map.get("itemName");
				String state=map.get("state");
				String user=map.get("user");
				String weight=map.get("totalWeight");
				String num=map.get("num");
				
				Object itemId=map.get("itemId");
				CheckOut checkOut=new CheckOut();
				checkOut.generateId();
				barCode=barCode.replaceAll("//", "");
				barCode=barCode.replace("\\", "");
				checkOut.setBarCode(barCode!=null?barCode.replaceAll(" ", ""):"");
				checkOut.setCpCompany(cp);
				if(accountId!=null){
					checkOut.setAccount(new Account(accountId));
				}
				ShipOrder order=new ShipOrder();
				order.setId(orderId);
				checkOut.setShipOrder(order);
				checkOut.setCreateDate(ssdf.parse(date));
				if(itemId!=null ){
					Item item=new Item();
					item.setId(String.valueOf(itemId));
					checkOut.setItem(item);
				}
				checkOut.setItemName(itemName);
				msg=msg.replaceAll("-", "");
				msg=msg.replaceAll(" ", "");
				checkOut.setMsg(msg);			
				orderCode=orderCode.replaceAll("-", "");
				checkOut.setOrderCode(orderCode!=null?orderCode.replaceAll(" ", ""):"");
				checkOut.setOrderDate(orderDate);			
				checkOut.setStatus(status);
				
				/**
				 * 待加入处理字段
				 * 收货省,收货商家
				 * 收货重量
				 * 收货数量
				 */
				checkOut.setState(state);
				User uu=new User();
				uu.setId(user);
				checkOut.setUser(uu);
				checkOut.setWeight(weight==null?0f:Double.valueOf(weight));
				checkOut.setNum(num==null?0L:Long.valueOf(num));	
			 logger.error("checkOut处理"+i+map);
	          this.checkOutService.insertCheckOut(checkOut);
	          this.redisProxy.del(dbKey); //移除此key数据。
	          //存入历史记录
	          /**
	           * 2017-11-30 不在存放这条记录
	           */
	//          this.redisProxy.set((historyKey+orderCode).getBytes(), ObjectTranscoder.serialize(checkOut));
	          i++;
	        
	          map=null;
	          checkOut=null;
	        }  
	}
	/**
	 * 订单状态上传，接单
	 */
	@Scheduled(cron = "0 */5 * * * ?")
	public void orderStatusUpload(){
		logger.error("订单接单");
		String orderKeys=RdsConstants.ORDER_ACCEPT+"*";
		Set<String> keys=this.redisProxy.keys(orderKeys);	
		for(Iterator<String> iterator = keys.iterator();iterator.hasNext();){  
			String key=iterator.next();
			String orderId=this.redisProxy.get(key);
			ShipOrderOperator operator=new ShipOrderOperator();
			operator.generateId();
			ShipOrder order=this.shipOrderService.findShipOrderById(orderId);
			if(order==null){
				logger.error("不存在的订单！"+key);
				this.redisProxy.del(key);
			}else{
				order.setStatus(OrderStatusEnum.WMS_ACCEPT);
				this.orderStatusUploadService.updateOrderState(order, null, "201");
				this.redisProxy.del(key);
				operator.setDescription("订单接单"+orderId);
				operator.setOperatorDate(new Date());
				operator.setOperatorModel(OperatorModel.TRADE_ACCEPT);
				operator.setShipOrder(order);
				this.operatorService.saveShipOrderOperator(operator);
				logger.error("订单接单ID"+orderId);
			}
		}
		logger.error("订单接单完成！"+keys.size());
		
	}
	/**
	 * 拒单任务
	 * */
	@Scheduled(cron = "0 */5 * * * ?")
	public void orderReject(){
		logger.error("拒单操作开始!");
		String rejectKey=RdsConstants.ORDER_REJECT+"*";
		Set<String> keys=this.redisProxy.keys(rejectKey);
		for(Iterator<String> iterator = keys.iterator();iterator.hasNext();){  
			String key=iterator.next();
			Map<String,Object> map=(Map<String, Object>) ObjectTranscoder.deserialize(this.redisProxy.get(key.getBytes()));
			ShipOrderOperator operator=new ShipOrderOperator();
			Map<String,Object> params=new HashMap<String, Object>();
			String orderCode=(String) map.get("orderCode");
			params.put("orderCode", orderCode);
			ShipOrder order=this.shipOrderService.getShipOrderByParams(params);
			if(order!=null){
				/**
				 * 在系统中已有的订单不允许拒单
				 */
				
				continue;
			}
			User user=this.userService.getUserById(order.getUser().getId());
			buildCuByStoreCode(user);
			this.orderStatusUploadService.updateOrderState(null, map, RdsConstants.ORDER_REJECT);
			logger.error(map);
			this.redisProxy.del(key);			
			operator.setDescription("订单接单"+orderCode);
			operator.setOperatorDate(new Date());
			operator.setOperatorModel(OperatorModel.TRADE_REJECT);
			operator.setShipOrder(order);
			this.operatorService.saveShipOrderOperator(operator);
		}
		logger.error("拒单操作结束!");
	}
	
	
	/**
	 * 构建CU，并存放在当前的sessionUser中
	 * @param storeCode
	 */
	private void buildCuByStoreCode(User user){
		Map<String,Object> params=new HashMap<String, Object>();
		params.put("userName", Constants.cainiao_account);
		List<Account> list=this.accountService.findAccountsByList(params);
		//1.查询出属于菜鸟的那个帐号
		if(list!=null && list.size()>0){
			Account account=list.get(0);
			//2.
			account.setCu(user.getCu());
			SessionUser.set(account);
		}
	}

	
	/**
	 * 订单不存在，重写缓存
	 * */
	@Scheduled(cron = "0 */15 * * * ?")
	public void checkOutNoUpdateRedis(){
		logger.error("订单不存在自动补录!");
		String rejectKey=RdsConstants.CHECK_NO_ORDER+"*";
		Set<String> keys=this.redisProxy.keys(rejectKey);		
		for(Iterator<String> iterator = keys.iterator();iterator.hasNext();){  
			String key=iterator.next();
			String orderCode=this.redisProxy.get(key);
			initShipOrderInfo(orderCode);
			this.redisProxy.del(key);
			logger.error("订单不存在的key:"+key);
		}		
	}
	/**
	 * 订单商品推送信息写缓存
	 **/
	@Scheduled(cron = "0 */15 * * * ?")
	public void initOrderItemInfo() throws Exception{
		logger.error("订单商品推送信息写缓存");
		initOrderItemByGroup();
		String url="http://admin.wlpost.com/mobile/initOrderItemByGroup";
		HttpClientUtils.httpPost(url, "");
		Map<String,Object> resultMap=new HashMap<String, Object>();
		logger.error("订单商品推送信息写缓存结束");
//		return resultMap;
	}
	
//	@Scheduled(cron = "0 */45 * * * ?")
	public void gcTask(){
		
	}
	
	
	@RequestMapping(value="order")
	@ResponseBody
	public Map<String,Object> order(){
		Map<String,Object> resultMap=new HashMap<String, Object>();
		logger.error("GC begin!");
		System.gc();
		logger.error("GC end!");
		resultMap.put("ret", "ok");
		return resultMap;
	}
	/**
	 * GC手工执行
	 * @return
	 */
	@RequestMapping(value="refreshGc")
	@ResponseBody
	public Map<String,Object> refreshGc(){
		Map<String,Object> resultMap=new HashMap<String, Object>();
		logger.error("GC begin!");
		System.gc();
		logger.error("GC end!");
		resultMap.put("ret", "ok");
		return resultMap;
	}
	/**
	 * 更新推送信息至RDS
	 * @return
	 * @throws Exception 
	 */
	
	@RequestMapping(value="initOrderItemByGroup")
	@ResponseBody
	public Map<String,Object> initOrderItemByGroup() throws Exception{
		Map<String,Object> resultMap=new HashMap<String, Object>();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		String startDate = sdf.format(new Date()) + " 00:00";
		String endDate = sdf.format(new Date()) + " 23:59";
		Map<String,Object> params=new HashMap<String, Object>();
		params.put("type", "GROUP");
		List<SystemItem> systemItem=this.systemItemService.findSystemItemByList(params);
		for(int i=0;systemItem!=null && i<systemItem.size();i++){
			params.clear();
			SystemItem itemObj=systemItem.get(i);
			logger.error(itemObj.getDescription());			
			params.put("startDate", startDate);
			params.put("endDate", endDate);
			if(itemObj==null){
				continue;
			}
			params.put("userIds",itemObj.getValue());
			List<Map<String,Object>> mapList=this.shipOrderService.getShipOrderItemByWorkGroup(params);
			List<Map<String, String>> resultList = new ArrayList<Map<String, String>>();
			for(int j=0;mapList!=null && j<mapList.size();j++){
				Map<String,Object> obj=mapList.get(j);
				Map<String,String> map=new HashMap<String, String>();
				String itemId = String.valueOf(obj.get("itemId"));
				String quantity = String.valueOf(obj.get("quantity"));
				String key=RdsConstants.MOBILE_ITEM+"*"+itemId+"*";
				Set<String> keySet=this.redisProxy.keys(key);
				if(keySet==null || keySet.size()==0){
					continue;
				}
				String itemKey=keySet.iterator().next();
				Map<String,String> itemMap=(Map<String, String>) ObjectTranscoder.deserialize(this.redisProxy.get(itemKey.getBytes("utf-8")));
				map.put("itemName", itemMap.get("itemName"));
				map.put("itemCode", itemMap.get("code"));
				map.put("quantity", quantity);
				map.put("shopName", itemMap.get("userName"));
				map.put("itemId", itemId);
				/**
				 * 完成数量
				 */
				params.put("itemId", itemId);
				params.put("status", OrderStatusEnum.WMS_FINASH);
				List<Map<String, Object>> temp=this.shipOrderService.getShipOrderItemByWorkGroup(params);
				String finishQuantity = "0";
				if (temp.size() > 0) {
					Map<String, Object> m = temp.get(0);
					finishQuantity = String.valueOf(m.get("quantity"));
					map.put("finishQuantity", String.valueOf(m.get("quantity")));
				} else {
					map.put("finishQuantity", String.valueOf(temp.size()));
				}
				if (quantity.equals(finishQuantity)) {
//					continue;
				}
				/**
				 * 审单数量
				 */
				params.put("status", OrderStatusEnum.WMS_AUDIT);
				temp=this.shipOrderService.getShipOrderItemByWorkGroup(params);
				if (temp.size() > 0) {
					Map<String, Object> m = temp.get(0);
					map.put("auditQuantity", String.valueOf(m.get("quantity")));
				} else {
					map.put("auditQuantity", "0");
				}
				/**
				 * 打单数据
				 */				
				params.put("status", OrderStatusEnum.WMS_PRINT);
				temp=this.shipOrderService.getShipOrderItemByWorkGroup(params);
				if (temp.size() > 0) {
					Map<String, Object> m = temp.get(0);
					map.put("printQuantity", String.valueOf(m.get("quantity")));
				} else {
					map.put("printQuantity", "0");
				}
				resultList.add(map);
			}			
			resultMap.put(itemObj.getDescription(), resultList);
		}
		String key=RdsConstants.MOBILE_ORDER_ITEM;
		logger.error("移动推单通知:"+resultMap);
		this.redisProxy.set(key.getBytes(), ObjectTranscoder.serialize(resultMap));		
		resultMap.put("ret", 1);
		resultMap.put("msg", "ok");
		return resultMap;
	}
	
	/**
	 * 手动接单
	 * @return
	 */
	@RequestMapping(value="orderAccept")
	@ResponseBody
	public Map<String,Object> orderAccept(){
		String id=this.getString("orderId");
		Map<String,Object> resultMap=new HashMap<String, Object>();
		ShipOrder order=this.shipOrderService.findShipOrderById(id);
		order.setStatus(OrderStatusEnum.WMS_ACCEPT);
		this.orderStatusUploadService.updateOrderState(order, null, "201");
		ShipOrderOperator operator=new ShipOrderOperator();
		operator.generateId();
		operator.setDescription("订单接单手动"+id);
		operator.setOperatorDate(new Date());
		operator.setOperatorModel(OperatorModel.TRADE_ACCEPT);
		operator.setShipOrder(order);
		this.operatorService.saveShipOrderOperator(operator);
		resultMap.put("msg", "接单成功！");
		return resultMap;
	}
	
	
	/**
	 * 手动接单
	 * @return
	 */
	@RequestMapping(value="orderAcceptbyUser")
	@ResponseBody
	public Map<String,Object> orderAcceptByUser(){
//		String id=this.getString("orderId");
		String user=getString("user");
		Map<String,Object> params=new HashMap<String, Object>();
		params.put("userId", user);
		params.put("status", "WMS_PRINT");
		List<ShipOrder> orderList=this.shipOrderService.findShipOrderByList(params);
		Map<String,Object> resultMap=new HashMap<String, Object>();
		for(int i=0;orderList!=null && i<orderList.size();i++){			
			ShipOrder order=orderList.get(i).getOrder();
			order.setStatus(OrderStatusEnum.WMS_ACCEPT);
			this.orderStatusUploadService.updateOrderState(order, null, "201");
			ShipOrderOperator operator=new ShipOrderOperator();
			operator.generateId();
			operator.setDescription("订单接单手动"+order.getId());
			operator.setOperatorDate(new Date());
			operator.setOperatorModel(OperatorModel.TRADE_ACCEPT);
			operator.setShipOrder(order);
			this.operatorService.saveShipOrderOperator(operator);
		}
		resultMap.put("msg", "接单成功！");
		return resultMap;
	}
	
	
	/**
	 * 订单不存在自动补进RDS
	 * @param orderExpressNo
	 * @return
	 */
	private Map<String,Object> initShipOrderInfo(String orderExpressNo){
		Map<String,Object> resultMap=new HashMap<String, Object>();
		Map<String,Object> params=new HashMap<String, Object>();
		params.put("tmsOrderCode", orderExpressNo);
		List<ShipOrder> orderList=this.shipOrderService.findShipOrderByList(params);
		ShipOrder order=orderList==null || orderList.size()==0?null:orderList.get(0);		
		if (order!=null && StringUtils.isNotEmpty(order.getTmsOrderCode()) && order.getStatus().equals(OrderStatusEnum.WMS_FINASH)) {
			params.clear();
			params.put("orderId", order.getId());
			ReceiverInfo receiverInfo=this.receiverInfoService.getReceiverInfoById(order.getReceiverInfo().getId());
			List<WmsConsignOrderItem> itemList=this.orderItemService.getWmsConsignOrderItemByList(params);
			Map<String, Object> memcachedMap = new HashMap<String, Object>();
			int zcIndex=0,zpIndex=0;
			for (int j = 0; itemList!=null && j<itemList.size(); j++) {
				WmsConsignOrderItem detail = itemList.get(j);
				Item item = this.itemService.getItem(detail.getItem().getId());
				if(item!=null && item.getItemType()!=null && item.getItemType().equals("ZC")){
					zcIndex+=detail.getItemQuantity();
				}
				if(item!=null && item.getItemType()!=null && item.getItemType().equals("ZP")){
					zpIndex+=detail.getItemQuantity();
				}
				memcachedMap.put(item.getBarCode(), item.getId()+"||"+detail.getItemQuantity()+"||"+item.getItemType());
			}
			memcachedMap.put("zcIndex", zcIndex);
			memcachedMap.put("zpIndex", zpIndex);
			memcachedMap.put("orderInfo", order.getId()+"||"+order.getTotalWeight()+"||"+order.getUser().getId());
			memcachedMap.put("orderDate", sdf.format(order.getCreateTime()));
			memcachedMap.put("state", order.getReceiverInfo()!=null?order.getReceiverInfo().getReceiverProvince():"");
			memcachedMap.put("totalWeight", String.valueOf(order.getTotalWeight()));
			memcachedMap.put("user", String.valueOf(order.getUser().getId()));
			memcachedMap.put("itemInfo", order.getItems());
			this.redisProxy.set(order.getTmsOrderCode().getBytes(), ObjectTranscoder.serialize(memcachedMap));
			logger.error("订单刷新补录:"+order.getTmsOrderCode()+"||"+memcachedMap);
			resultMap.putAll(memcachedMap);
		}else{
			HttpClientUtils.httpPost("http://admin.wlpost.com/memcached/refreshOrder?expressNo="+orderExpressNo, "");
		}
		return resultMap;
	}
	
	@RequestMapping(value="clearRedis")
	public String clearRedisCode(){
		String key="success_record";
		Map<String,Object> params=new HashMap<String,Object>();
		params.put("startTime", "2017-10-01 00:00");
		params.put("endTime", "2017-12-01 00:00");
		List<ShipOrder> orderList=this.shipOrderService.getShipOrderListByAll(params);
		for(int i=0;i<orderList.size();i++){
			ShipOrder order=orderList.get(i);
			String value=key+order.getTmsOrderCode();
			Map<String, String> map=(Map<String, String>) ObjectTranscoder.deserialize(this.redisProxy.get(value.getBytes()));
			if(map!=null){
				System.err.println(map);
				this.redisProxy.del(value);
			}
		}
		return null;
	}
}
