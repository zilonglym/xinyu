package com.xinyu.controller.cainiao;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.taobao.pac.sdk.cp.PacClient;
import com.taobao.pac.sdk.cp.PacServlet;
import com.taobao.pac.sdk.cp.SendSysParams;
import com.taobao.pac.sdk.cp.dataobject.request.LPC_PACK_PUB_QUERY.LpcPackPubQueryRequest;
import com.taobao.pac.sdk.cp.dataobject.request.TMS_DISPATCH_FIND_SEND_BRANCH.AddressReqDO;
import com.taobao.pac.sdk.cp.dataobject.request.TMS_DISPATCH_FIND_SEND_BRANCH.TmsDispatchFindSendBranchRequest;
import com.taobao.pac.sdk.cp.dataobject.response.LPC_PACK_PUB_QUERY.LpcPackPubQueryResponse;
import com.taobao.pac.sdk.cp.dataobject.response.TMS_DISPATCH_FIND_SEND_BRANCH.AddressResDO;
import com.taobao.pac.sdk.cp.dataobject.response.TMS_DISPATCH_FIND_SEND_BRANCH.TmsDispatchFindSendBranchResponse;
import com.xinyu.common.BaseController;
import com.xinyu.model.qm.StoreConstants;
import com.xinyu.model.trade.ShipOrder;
import com.xinyu.service.caoniao.InventoryCountCpImpl;
import com.xinyu.service.caoniao.StockInOrderConfirmCpImpl;
import com.xinyu.service.caoniao.StockOutOrderConfirmCpImpl;
import com.xinyu.service.caoniao.WmsConsignOrderConfirmService;
import com.xinyu.service.caoniao.WmsConsignOrderNotifyCpImpl;
import com.xinyu.service.caoniao.WmsItemQueryService;
import com.xinyu.service.caoniao.WmsOrderCancelNotifyCpImpl;
import com.xinyu.service.caoniao.WmsOrderStatusUploadCpImpl;
import com.xinyu.service.caoniao.WmsSkuInfoNotifyCpImpl;
import com.xinyu.service.caoniao.WmsStockInOrderNotifyCpImpl;
import com.xinyu.service.caoniao.WmsStockOutOrderNotifyCpImpl;
import com.xinyu.service.common.Constants;
import com.xinyu.service.order.StockInOrderService;
import com.xinyu.service.trade.ShipOrderService;
import com.xinyu.service.util.CaiNiaoPacClient;

/**
 * 菜鸟基础的入口Controller
 * 
 * @author yangmin 2017年4月23日
 *
 */
@Controller
@RequestMapping(value = "cainiao")
public class CainiaoController extends BaseController {

	public PacClient pacClient;

	@Autowired
	private WmsSkuInfoNotifyCpImpl skuInfoNotify;
	@Autowired
	private WmsConsignOrderNotifyCpImpl orderNotify;
	@Autowired
	private WmsOrderCancelNotifyCpImpl orderCancel;
	@Autowired
	private WmsStockInOrderNotifyCpImpl stockInOrderNotify;
	@Autowired
	private WmsStockOutOrderNotifyCpImpl stockOutOrderNotify;
	@Autowired
	private WmsConsignOrderConfirmService orderConfirmService;
	@Autowired
	private WmsItemQueryService itemQueryService;

	@Autowired
	private StockInOrderConfirmCpImpl stockInOrderConfirmCpImpl;

	@Autowired
	private InventoryCountCpImpl inventoryCountCpImpl;

	@Autowired
	private StockOutOrderConfirmCpImpl stockOutOrderConfirmCpImpl;

	@Autowired
	private WmsOrderStatusUploadCpImpl wmsOrderStatusUploadCpImpl;

	@Autowired
	private StockInOrderService stockInOrderService;
	@Autowired
	private ShipOrderService shipOrderService;

	private PacServlet pacServlet;

	private void init() {
		pacClient = new PacClient(Constants.cainiao_appKey, Constants.cainiao_secretKey, Constants.cainiao_url);
		pacServlet = new PacServlet();
		pacServlet.setPacClient(pacClient);
		// 注入接口的具体实现类,为入库通知接口为例
		// 入参：接口名，具体实现类
		// 接口名区分大小写,无空格。必须完全匹配
		pacClient.registerReceiveListener(Constants.WMS_STOCK_IN_ORDER_NOTIFY, stockInOrderNotify);
		pacClient.registerReceiveListener(Constants.WMS_STOCK_OUT_ORDER_NOTIFY, stockOutOrderNotify);
		pacClient.registerReceiveListener(Constants.WMS_SKU_INFO_NOTIFY, skuInfoNotify);
		pacClient.registerReceiveListener(Constants.WMS_CONSIGN_ORDER_NOTIFY, orderNotify);
		pacClient.registerReceiveListener(Constants.WMS_ORDER_CANCEL_NOTIFY, orderCancel);
		pacServlet.init();
	}

	@RequestMapping(value = "/index")
	public void execute(HttpServletRequest request, HttpServletResponse response) throws Exception {
		logger.debug("菜鸟进入！");
		if (this.pacServlet == null) {
			init();
		}
		pacServlet.doPost(request, response);
	}

	/**
	 * 确认接口调用示例
	 */
	@RequestMapping(value = "order/test")
	public void orderConfirm() {

		System.out.println("进入测试");

		SendSysParams params = new SendSysParams();
		params.setFromCode(Constants.cainiao_fromCode);
		LpcPackPubQueryRequest request = new LpcPackPubQueryRequest();
		request.setAppName("中仓网络仓储");
		request.setCpCode("STO");
		request.setMailNo("3348858809845");
		LpcPackPubQueryResponse response = CaiNiaoPacClient.getClient().send(request, params);
		if(response.isSuccess()){
			
			String status=response.getLogisticsStatus();
			String desc=response.getLogisticsStatusDesc();
			System.err.println(status);
			System.err.println(desc);
		}else{
			System.err.println(response.getErrorMsg());
		}
		
		
		//TMS_DISPATCH_FIND_SEND_BRANCH
		
		TmsDispatchFindSendBranchRequest req=new TmsDispatchFindSendBranchRequest();
//		req.setAddressReqList(addressReqList);
		List<AddressReqDO> list=new ArrayList<AddressReqDO>();
		AddressReqDO address=new AddressReqDO();
		address.setAddress("内蒙古自治区 赤峰市 翁牛特旗 乌丹镇，新华街东段，老环保局楼下，男人屋服饰（368号大厅）");
		list.add(address);
		req.setAddressReqList(list);
		TmsDispatchFindSendBranchResponse resp=CaiNiaoPacClient.getClient().send(req, params);
		if(resp.isSuccess()){
			List<AddressResDO> ll=resp.getAddressResList();
			for(int i=0;i<ll.size();i++){
				AddressResDO res=ll.get(i);
				System.err.println(res.getBranchCode()+""+res.getBranchName()+""+res.getAddress());
			}
		}
		
	}

	@RequestMapping(value = "item/query")
	public void wmsItemQuery() {
		String providerTpId = this.getString("providerTpId");
		String ids = this.getString("itemIds");
		String[] itemIds;
		if (ids != null) {
			itemIds = ids.split(",");
		} else {
			itemIds = null;
		}
		this.itemQueryService.submitItemQuery(providerTpId, itemIds);
	}

	@RequestMapping(value = "shipOrder/statusUpload")
	public void wmsShipOrderStatusUplod() {
		String id = this.getString("id");
		ShipOrder shipOrder = this.shipOrderService.findShipOrderById(id);
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put("account", this.getCurrentAccount());
		this.wmsOrderStatusUploadCpImpl.updateOrderState(shipOrder, null, "201");
	}

}
