package com.xinyu.check.controller;

import java.io.UnsupportedEncodingException;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import com.xinyu.check.util.MemcachedManager;
import com.xinyu.check.util.ObjectTranscoder;
import com.xinyu.check.util.RedisUtil;

import redis.clients.jedis.Jedis;
import redis.clients.jedis.ShardedJedis;
import redis.clients.jedis.ShardedJedisPool;
import redis.clients.jedis.exceptions.JedisDataException;
import redis.clients.jedis.exceptions.JedisException;

@Controller
@RequestMapping(value="redis")
public class RedisController extends BaseController{
	
	@Autowired
	private ShardedJedisPool shardedJedisPool;
	
	@RequestMapping(value="index")
	public void springT(){
		ShardedJedis jedis = shardedJedisPool.getResource();
		jedis.set("name", "test");
		
		System.err.println(jedis.get("name"));
	}
	
	
	public static void main(String[] args) {
		//{zpIndex=120, zcIndex=1, 2902082140620=1, 6940971207081=1}
		String orderCode="9891297785185";
//		String keyValue="20170920Check_out_db"+orderCode+"*";
		String itemKey="mobile_item*";
		//连接本地的 Redis 服务
        Jedis jedis = RedisUtil.getJedis();
        System.out.println("连接成功");
        //查看服务是否运行
        Set<String> itemKeys=jedis.keys(itemKey);
       System.err.println(itemKeys);
       String kk=itemKeys.iterator().next();
       byte[] ss = encode(kk, "gb2312");
//        orderInfo(orderCode);
//       deleteItemInfo(itemKeys,jedis);
	}
	
	
	
	private static  void  orderInfo(String orderCode){
		Jedis jedis = RedisUtil.getJedis();
		System.err.println("-------------");
		MemcachedManager manager=new MemcachedManager();
		Map<String,Object> map=(Map<String, Object>) manager.get(orderCode);
		
		System.err.println(map);
		
		map=(Map<String, Object>) ObjectTranscoder.deserialize(jedis.get(orderCode.getBytes()));
		System.err.println(map);
	}

	
	private static void deleteItemInfo(Set<String> itemKeys,Jedis jedis){
		int i=0;
		for(Iterator<String> iterator=itemKeys.iterator();iterator.hasNext();){
			String key=iterator.next();
			System.err.println(i+"|"+key);
			i++;
			jedis.del(key);
		}
		
	}
	
	
	private static byte[] encode(final String str, String encodeType) {
        try {
            if (str == null) {
                throw new JedisDataException("value sent to redis cannot be null");
            }
            return str.getBytes(encodeType);
        } catch (UnsupportedEncodingException e) {
            throw new JedisException(e);
        }
    }
	
}
