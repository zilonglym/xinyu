package com.xinyu.service.waybill.impl;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;

import org.apache.commons.lang3.StringUtils;
import org.apache.http.Consts;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.conn.scheme.Scheme;
import org.apache.http.conn.ssl.SSLSocketFactory;
import org.apache.http.impl.conn.PoolingClientConnectionManager;
import org.apache.http.message.BasicNameValuePair;
import org.apache.log4j.Logger;
import org.json.JSONArray;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.taobao.api.DefaultTaobaoClient;
import com.taobao.api.TaobaoClient;
import com.taobao.api.domain.LogisticsService;
import com.taobao.api.domain.PackageItem;
import com.taobao.api.domain.TradeOrderInfo;
import com.taobao.api.domain.WaybillAddress;
import com.taobao.api.domain.WaybillApplyCancelRequest;
import com.taobao.api.domain.WaybillApplyNewInfo;
import com.taobao.api.domain.WaybillApplyNewRequest;
import com.taobao.api.domain.WaybillDetailQueryRequest;
import com.taobao.api.request.CainiaoCloudprintStdtemplatesGetRequest;
import com.taobao.api.request.CainiaoWaybillIiGetRequest;
import com.taobao.api.request.CainiaoWaybillIiGetRequest.AddressDto;
import com.taobao.api.request.CainiaoWaybillIiGetRequest.OrderInfoDto;
import com.taobao.api.request.CainiaoWaybillIiGetRequest.PackageInfoDto;
import com.taobao.api.request.CainiaoWaybillIiGetRequest.TradeOrderInfoDto;
import com.taobao.api.request.CainiaoWaybillIiGetRequest.UserInfoDto;
import com.taobao.api.request.CainiaoWaybillIiGetRequest.WaybillCloudPrintApplyNewRequest;
import com.taobao.api.request.CainiaoWaybillIiQueryByWaybillcodeRequest;
import com.taobao.api.request.CainiaoWaybillIiQueryByWaybillcodeRequest.WaybillDetailQueryByWaybillCodeRequest;
import com.taobao.api.request.WlbWaybillICancelRequest;
import com.taobao.api.request.WlbWaybillIGetRequest;
import com.taobao.api.request.WlbWaybillIQuerydetailRequest;
import com.taobao.api.response.CainiaoCloudprintStdtemplatesGetResponse;
import com.taobao.api.response.CainiaoWaybillIiGetResponse;
import com.taobao.api.response.CainiaoWaybillIiQueryByWaybillcodeResponse;
import com.taobao.api.response.WlbWaybillICancelResponse;
import com.taobao.api.response.WlbWaybillIGetResponse;
import com.taobao.api.response.WlbWaybillIQuerydetailResponse;
import com.xinyu.dao.base.CentroDao;
import com.xinyu.dao.base.ItemDao;
import com.xinyu.dao.base.SenderInfoDao;
import com.xinyu.dao.base.SystemItemDao;
import com.xinyu.dao.base.UserDao;
import com.xinyu.dao.trade.ReceiverInfoDao;
import com.xinyu.dao.trade.ShipOrderOperatorDao;
import com.xinyu.dao.trade.TmsOrderDao;
import com.xinyu.dao.trade.WmsConsignOrderItemDao;
import com.xinyu.model.base.Centro;
import com.xinyu.model.base.ReceiverInfo;
import com.xinyu.model.base.User;
import com.xinyu.model.common.SessionUser;
import com.xinyu.model.qm.StoreConstants;
import com.xinyu.model.system.Account;
import com.xinyu.model.system.SystemItem;
import com.xinyu.model.system.enums.OperatorModel;
import com.xinyu.model.system.enums.OrderStatusEnum;
import com.xinyu.model.system.enums.StoreSystemItemEnums;
import com.xinyu.model.system.enums.SystemSourceEnums;
import com.xinyu.model.trade.ShipOrder;
import com.xinyu.model.trade.ShipOrderOperator;
import com.xinyu.model.trade.TmsOrder;
import com.xinyu.model.trade.TmsOrderItem;
import com.xinyu.model.trade.WmsConsignOrderItem;
import com.xinyu.service.common.BaseServiceImpl;
import com.xinyu.service.trade.ShipOrderService;
import com.xinyu.service.util.AddressUtil;
import com.xinyu.service.util.Util;
import com.xinyu.service.waybill.WayBillService;

/**
 * 打印服务
 */
@Service("waybillServiceImpl")
public class WaybillServiceImpl extends BaseServiceImpl implements WayBillService {

	public static final Logger logger = Logger.getLogger(WaybillServiceImpl.class);

	private String STO_ADDRESS = "湘潭市岳塘区书院路街道新塘村申通快递总部";

	private String YUNDA_411353 = "双马镇金钢人防";
	
	private String HTKY5="双马镇金钢结构";	
	

	private Map<String, Object> templateMap = null;

	private static String order_service_url = "http://bsp-oisp.sf-express.com/bsp-oisp/sfexpressService";// 下订单

	private static String checkword = "B65oS5ljKgGlVfS7VwJeLGtPc6WPulME";// "PAYHZH
																			// Hi9go87nCbFEuRWC";
																			// RccCt43AVd8ESfuk

	private static String check_no = "7310524035";

	private static int port = 9443;

	@Autowired
	private UserDao userDao;

	@Autowired
	private ItemDao itemDao;

	@Autowired
	private SystemItemDao systemItemDao;

	@Autowired
	private ReceiverInfoDao receiverInfoDao;

	@Autowired
	private SenderInfoDao senderInfoDao;

	@Autowired
	private ShipOrderService shipOrderService;

	@Autowired
	private WmsConsignOrderItemDao orderItemDao;

	@Autowired
	private CentroDao centroDao;
	
	@Autowired
	private ShipOrderOperatorDao operatorDao;
	@Autowired
	private TmsOrderDao tmsOrderDao;

	@Override
	public String getCainiaoTemplates() throws Exception {

		initSessionKey();
		/**
		 * 获取所有的菜鸟标准电子面单模板
		 *  */
		  TaobaoClient client = new
		  DefaultTaobaoClient(StoreConstants.cainiao_url,
		  StoreConstants.rookie_appkey, StoreConstants.rookie_secret);
		  CainiaoCloudprintStdtemplatesGetRequest req = new  CainiaoCloudprintStdtemplatesGetRequest();
		  
		  CainiaoCloudprintStdtemplatesGetResponse rsp = client.execute(req,
		  StoreConstants.rookie_sessionKey); String result=rsp.getBody();
		  System.err.println(result);
		
		/**
		 * 获取商家的自定义区模板信息
		 */
		// TaobaoClient client = new
		// DefaultTaobaoClient(StoreConstants.cainiao_url,
		// StoreConstants.rookie_appkey, StoreConstants.rookie_secret);
		// CainiaoCloudprintCustomaresGetRequest req = new
		// CainiaoCloudprintCustomaresGetRequest();
		// req.setTemplateId(999L);
		// CainiaoCloudprintCustomaresGetResponse rsp = client.execute(req,
		// StoreConstants.rookie_sessionKey);
		// String result=rsp.getBody();
		// System.out.println(rsp.getBody());
		//

		/**
		 * 获取用户使用的菜鸟电子面单模板信息)
		 */
		// TaobaoClient client = new
		// DefaultTaobaoClient(StoreConstants.cainiao_url,
		// StoreConstants.rookie_appkey, StoreConstants.rookie_secret);
		// CainiaoCloudprintMystdtemplatesGetRequest req = new
		// CainiaoCloudprintMystdtemplatesGetRequest();
		// CainiaoCloudprintMystdtemplatesGetResponse rsp = client.execute(req,
		// StoreConstants.rookie_sessionKey);
		// String result=rsp.getBody();
		// System.out.println(rsp.getBody());

		/**
		 * 用户使用了哪些自定义区模板
		 */
		// TaobaoClient client = new
		// DefaultTaobaoClient(StoreConstants.cainiao_url,
		// StoreConstants.rookie_appkey, StoreConstants.rookie_secret);
		// CainiaoCloudprintIsvtemplatesGetRequest req = new
		// CainiaoCloudprintIsvtemplatesGetRequest();
		// CainiaoCloudprintIsvtemplatesGetResponse rsp;
		// rsp = client.execute(req, StoreConstants.rookie_sessionKey);
		// String result=rsp.getBody();
		// System.out.println(rsp.getBody());

		/**
		 * 用户自定义资源
		 
		TaobaoClient client = new DefaultTaobaoClient(StoreConstants.cainiao_url, StoreConstants.rookie_appkey,
				StoreConstants.rookie_secret);
		CainiaoCloudprintIsvResourcesGetRequest req = new CainiaoCloudprintIsvResourcesGetRequest();
		// req.setIsvResourceType("CUSTOM_AREA");
		req.setIsvResourceType("TEMPLATE");

		CainiaoCloudprintIsvResourcesGetResponse rsp = client.execute(req);
		String result = rsp.getBody();
		System.out.println(rsp.getBody());
		*/
		
		
		/**
		 * 
		 * 
		 
		TaobaoClient client = new DefaultTaobaoClient(StoreConstants.cainiao_url, StoreConstants.rookie_appkey,
				StoreConstants.rookie_secret);
		CainiaoWaybillIiQueryByWaybillcodeRequest req = new CainiaoWaybillIiQueryByWaybillcodeRequest();
		List<WaybillDetailQueryByWaybillCodeRequest> list2 = new ArrayList<WaybillDetailQueryByWaybillCodeRequest>();
		WaybillDetailQueryByWaybillCodeRequest obj3 = new WaybillDetailQueryByWaybillCodeRequest();
		list2.add(obj3);
		obj3.setCpCode("STO");
		obj3.setObjectId("1");
		obj3.setWaybillCode("3346734469774");
		req.setParamList(list2);
		CainiaoWaybillIiQueryByWaybillcodeResponse rsp = client.execute(req, StoreConstants.rookie_sessionKey);
		System.out.println(rsp.getBody());
		String result = rsp.getBody();
		*/
		return result;
	}

	/**
	 * 取菜鸟电子面单号
	 * 
	 * @param ids
	 * @param cpCode
	 * @param batchCode
	 * @param url
	 *            模板的URL
	 * @return
	 */
	@Override
	@Transactional
	public Map<String, Object> getCainiaoBill(String ids, String cpCode, String url, String batchCode,Account account)  throws Exception{
		if (this.templateMap == null) {
			 this.refreshTemplate();
		}
		String[] ary = ids.split(",");
		String idArry="";
		Map<String, Object> resultMap = new HashMap<String, Object>();
		StringBuffer buffer = new StringBuffer();
		TmsOrder tmsOrder=null;
		ShipOrder shipOrder=null;
		ReceiverInfo receiverInfo=null;
		User user =null;
		TaobaoClient client = new DefaultTaobaoClient(StoreConstants.cainiao_url, StoreConstants.rookie_appkey,
				StoreConstants.rookie_secret);
		CainiaoWaybillIiGetRequest req =null;
		WaybillCloudPrintApplyNewRequest params=null;
		CainiaoWaybillIiGetResponse response =null;
		for (int i = 0; i < ary.length; i++) {
			
			tmsOrder=this.tmsOrderDao.getTmsOrderById(ary[i]);
			
			shipOrder = this.shipOrderService.findShipOrderById(tmsOrder.getOrder().getId());
			/**
			 * 审单状态的订单才允许取单号
			 */
			if(tmsOrder!=null && !tmsOrder.getOrderStatus().equals(OrderStatusEnum.WMS_AUDIT)){
				continue;
			}
			cpCode = tmsOrder.getCode();
			receiverInfo = this.receiverInfoDao.getReceiverInfoById(shipOrder.getReceiverInfo().getId());
			String items = this.shipOrderService.bulidItemsData(shipOrder);
			user = this.userDao.getUserById(shipOrder.getUser().getId());
			
			 req = new CainiaoWaybillIiGetRequest();
			params = new WaybillCloudPrintApplyNewRequest();
			UserInfoDto userInfo = new UserInfoDto();// 发货人信息
			AddressDto address = new AddressDto();// 发货地址
			Centro centro = this.centroDao.getCentroById(shipOrder.getCu());
			String nameMsg = shipOrder.getId() + ";"; // 订单错误提示信息前缀
			if (cpCode != null && cpCode.equals("STO")) {
				address.setDetail(STO_ADDRESS);
			} else if (cpCode != null && cpCode.equals("YUNDA411353")) {
				address.setDetail(YUNDA_411353);
				cpCode = "YUNDA";
			} else if (cpCode != null && cpCode.equals("HTKY11")) {
				address.setDetail(YUNDA_411353);
				cpCode = "HTKY";
			}else if(cpCode!=null && cpCode.equals("HTKY5")){
				address.setDetail(HTKY5);
				cpCode="HTKY";
			} else if (cpCode != null && cpCode.equals("ZTO")) {
				address.setDetail(YUNDA_411353);
			}  else {
				address.setDetail(centro.getAddress());
			}
			params.setCpCode(cpCode);
			address.setCity(centro.getCity());
			address.setDistrict(centro.getArea());
			address.setProvince(centro.getProvince());
			// address.setTown("i");
			userInfo.setAddress(address);
			userInfo.setMobile(centro.getMobile());
			userInfo.setName("马亮");
			userInfo.setPhone(centro.getPhone());
			params.setSender(userInfo);

			List<TradeOrderInfoDto> tradeInfoList = new ArrayList<TradeOrderInfoDto>();// 请求面单信息
			TradeOrderInfoDto tradeOrderInfo = new TradeOrderInfoDto();
			tradeInfoList.add(tradeOrderInfo);
			tradeOrderInfo.setLogisticsServices("{\"SVC-COD\": {\"value\":  \"NORMAL\"} }");
			tradeOrderInfo.setObjectId(tmsOrder.getId());
			OrderInfoDto tradeInfo = new OrderInfoDto();// 订单信息

			if (shipOrder.getSystemSource().equals(SystemSourceEnums.CAINIAO)
					|| shipOrder.getSystemSource().equals(SystemSourceEnums.QM)) {
				if (shipOrder.getOrderSource() != 0) {
					tradeInfo.setOrderChannelsType("TB");
				} else {
					tradeInfo.setOrderChannelsType("OTHERS");
				}
			} else {
				tradeInfo.setOrderChannelsType("TB");
			}

			List<String> tradeList = new ArrayList<String>();
			tradeList.add(shipOrder.getOtherOrderNo());
			tradeInfo.setTradeOrderList(tradeList);
			tradeOrderInfo.setOrderInfo(tradeInfo);

			PackageInfoDto packageInfo = new PackageInfoDto();// 包裹信息
			packageInfo.setId(tmsOrder.getId());
			List<com.taobao.api.request.CainiaoWaybillIiGetRequest.Item> itemList = new ArrayList<com.taobao.api.request.CainiaoWaybillIiGetRequest.Item>();// 包裹高品信息,不能超过10
			com.taobao.api.request.CainiaoWaybillIiGetRequest.Item item = new com.taobao.api.request.CainiaoWaybillIiGetRequest.Item();

			if (items != null && items.length() > 50) {
				item.setName(items.substring(0, 50));
			} else {
				item.setName(items);
			}
			// String count =
			// String.valueOf(shipOrder.getOrderItemList().size());
			Map<String, Object> param = new HashMap<String, Object>();
			param.put("tmsOrderId", tmsOrder.getId());
//			List<WmsConsignOrderItem> orderItemList = this.orderItemDao.getWmsConsignOrderItemByList(param);
			List<TmsOrderItem> orderItemList=this.tmsOrderDao.getTmsOrderItemByList(param);
			item.setCount(Long.valueOf(orderItemList.size()));
			itemList.add(item);
			packageInfo.setItems(itemList);
			tradeOrderInfo.setPackageInfo(packageInfo);

			UserInfoDto receiveUser = new UserInfoDto(); // 收件人信息
			AddressDto receiveAddress = new AddressDto();// 收件人地址信息
			receiveAddress.setCity(receiverInfo.getReceiverCity());
			receiveAddress.setDetail(AddressUtil.cainiaoFormat(receiverInfo.getReceiverAddress()));
			receiveAddress.setDistrict(receiverInfo.getReceiverArea());
			receiveAddress.setProvince(receiverInfo.getReceiverProvince());
			receiveUser.setAddress(receiveAddress);
			/**
			 * 如果手机号码为空，则传电话号码
			 */
			if (StringUtils.isNotEmpty(receiverInfo.getReceiverMobile())) {
				nameMsg = nameMsg + ":" + receiverInfo.getReceiverMobile();
				receiveUser.setMobile(receiverInfo.getReceiverMobile());
			} else {
				nameMsg = nameMsg + ":" + receiverInfo.getReceiverPhone();
				receiveUser.setMobile(receiverInfo.getReceiverPhone());
			}
			receiveUser.setName((AddressUtil.cainiaoFormat(receiverInfo.getReceiverName())));
			receiveUser.setPhone(receiverInfo.getReceiverPhone());
			tradeOrderInfo.setRecipient(receiveUser);

			if (StringUtils.isNotBlank(url)) {
				tradeOrderInfo.setTemplateUrl(url);
			}
			tradeOrderInfo.setUserId(user.getTbUserId());
			params.setTradeOrderInfoDtos(tradeInfoList);
			// params.setStoreCode("553323");//对接落地配业务
			// params.setResourceCode("DISTRIBUTOR_978324");
			// params.setDmsSorting(true);
			req.setParamWaybillCloudPrintApplyNewRequest(params);
			logger.info("菜鸟云参数:" + req.getTextParams());
			initSessionKey();
			 response = client.execute(req, StoreConstants.rookie_sessionKey);
			resultMap.put("message", "cainiao.waybill.ii.get  接口调用成功!");
			String responseText = response.getBody();
			resultMap.put("tradeId", "" + shipOrder.getId());
			resultMap.put("tmsId", tmsOrder.getId());
			// logger.debug("菜鸟云 面单返回:"+responseText);
			if (response.isSuccess()) {
				logger.info("菜鸟云 面单成功返回" + responseText);

				JSONObject object = new JSONObject(responseText);
				JSONObject responseObj = object.getJSONObject("cainiao_waybill_ii_get_response");
				JSONObject modulesObj = responseObj.getJSONObject("modules");
				JSONArray cloudAry = modulesObj.getJSONArray("waybill_cloud_print_response");
				JSONObject rootObj = cloudAry.getJSONObject(0);
				String dataStr = rootObj.getString("print_data");

				JSONObject printData = new JSONObject(dataStr);
				JSONObject dataObj = printData.getJSONObject("data");
				JSONObject routingInfo = dataObj.getJSONObject("routingInfo");
				JSONObject consolidation = routingInfo.getJSONObject("consolidation");
				JSONObject sortation = routingInfo.getJSONObject("sortation");

				// 更新出库单状态
				// ShipOrder sendShipOrder =
				// shipOrderService.getSendShipOrderByTradeId(trade.getId());
				List<Map<String, String>> paramMapList = new ArrayList<Map<String, String>>();
				Map<String, String> paramMap = new HashMap<String, String>();
				paramMap.put("id", "" + shipOrder.getId());
				paramMap.put("tmsId", tmsOrder.getId());
				paramMap.put("expressCompany", cpCode);
				if (cpCode != null && cpCode.equals("EYB")) {
					paramMap.put("expressOrderno", rootObj.getString("waybill_code"));
				}else if(cpCode!=null && cpCode.equals("HTKY5")){
					paramMap.put("expressOrderno", "HTKY");
				}else if(cpCode!=null && cpCode.equals("HTKY11")){
					paramMap.put("expressOrderno", "HTKY");
				}  else {
					paramMap.put("expressOrderno", rootObj.getString("waybill_code"));
				}
				paramMap.put("status", OrderStatusEnum.WMS_GETNO.getKey());
				String templateUrl = (String) this.templateMap.get(cpCode);
				if (StringUtils.isEmpty(templateUrl)) {
					templateUrl = printData.getString("templateURL");
				}
				paramMap.put("templateURL", templateUrl);// 模板URL
				if (!routingInfo.isNull("routeCode")) {
					paramMap.put("routeCode", routingInfo.getString("routeCode"));
				}
				paramMap.put("sortationName", sortation.isNull("name")?"":sortation.getString("name")); // 大头
				paramMap.put("consolidationName", consolidation.isNull("name") ? "" : consolidation.getString("name")); // 收货网点名称
				paramMap.put("consolidationCode", consolidation.isNull("code") ? "" : consolidation.getString("code")); // 收货网点CODE
				paramMap.put("batchCode", batchCode);// 打印批次号
				paramMapList.add(paramMap);
				shipOrderService.setSendOrderExpressAndStatusById(paramMapList);
				
				idArry=idArry+ary[i]+",";
				resultMap.put("ids", idArry);
				resultMap.put("flag", "成功");
				resultMap.put("orderNo", rootObj.getString("waybill_code"));
				resultMap.put("code", "200");
				
				/**
				 * 写操作记录
				 */
				logger.debug("account:"+((Account)SessionUser.get()).getUserName());
				ShipOrderOperator operator = new ShipOrderOperator();
				operator.generateId();
				operator.setShipOrder(shipOrder);
				operator.setAccount(account);
				operator.setOperatorDate(new Date());
				operator.setOperatorModel(OperatorModel.TRADE_GETNO);
				operator.setOldValue(shipOrder.getTmsServiceCode()+"|"+shipOrder.getOrderCode());
				operator.setNewValue(batchCode+"|"+shipOrder.getTmsServiceCode()+"|"+shipOrder.getTmsOrderCode());
				operator.setDescription("取订单号："+shipOrder.getOrderCode()+"|"+shipOrder.getTmsServiceCode()+"|"+shipOrder.getTmsOrderCode());
				this.operatorDao.saveShipOrderOperator(operator);
				
			} else {
				logger.error("菜鸟云 面单失败返回" + responseText);
				buffer.append(receiverInfo.getReceiverName() + "|" + receiverInfo.getReceiverMobile() + "|"
						+ responseText + "</br>");
			}

			resultMap.put("msg", buffer.toString());
		}
		return resultMap;
	}

	/**
	 * 取淘宝电子面单号(一代接口) taobao.wlb.waybill.i.get 获取物流服务商电子面单号v1.0
	 * 
	 * @param url
	 */
	@Override
	public Map<String, String> billGet(ShipOrder shipOrder, String cpCode, String batchCode) {

		Map<String, String> retMap = new HashMap<String, String>();
		TaobaoClient client = new DefaultTaobaoClient(StoreConstants.rookie_url, StoreConstants.rookie_appkey,
				StoreConstants.rookie_secret);
		WlbWaybillIGetRequest req = new WlbWaybillIGetRequest();

		WaybillApplyNewRequest waybillApplyNewRequest = new WaybillApplyNewRequest();

		Centro centro = this.centroDao.getCentroById(shipOrder.getCu());
		User user = this.userDao.getUserById(shipOrder.getUser().getId());
		String nameMsg = shipOrder.getId() + ";"; // 订单错误提示信息前缀
		String items = this.shipOrderService.bulidItemsData(shipOrder);// 订单商品明细字符串
		ReceiverInfo receiverInfo = this.receiverInfoDao.getReceiverInfoById(shipOrder.getReceiverInfo().getId());
		// 面单详细信息
		/**
		 * 订单地址。。 发货地址
		 */
		WaybillAddress address = new WaybillAddress();
		address.setArea(centro.getArea());
		address.setProvince(centro.getProvince());
		if (cpCode != null && cpCode.equals("STO")) {
			address.setAddressDetail(STO_ADDRESS);
		} else if (cpCode != null && cpCode.equals("YUNDA411353")) {
			address.setAddressDetail(YUNDA_411353);
			cpCode = "YUNDA";
		} else if (cpCode != null && cpCode.equals("HTKY11")) {
			address.setAddressDetail(YUNDA_411353);
			cpCode = "HTKY";
		} else {
			address.setAddressDetail(centro.getAddress());
		}

		waybillApplyNewRequest.setCpCode(cpCode);
		address.setCity(centro.getCity());

		waybillApplyNewRequest.setShippingAddress(address);

		List<TradeOrderInfo> tradeOrderInfoList = new ArrayList<TradeOrderInfo>();

		TradeOrderInfo tradeItem = new TradeOrderInfo();
		if (items != null && items.length() > 50) {
			tradeItem.setItemName(items.substring(0, 50));
		} else {
			tradeItem.setItemName(items);
		}
		nameMsg = nameMsg + receiverInfo.getReceiverName();
		tradeItem.setConsigneeName(AddressUtil.cainiaoFormat(receiverInfo.getReceiverName()));// 收件人
		if (shipOrder.getSystemSource().equals(SystemSourceEnums.QM)
				|| shipOrder.getSystemSource().equals(SystemSourceEnums.CAINIAO)) {
			if (shipOrder.getOrderSource() != 0) {
				tradeItem.setOrderChannelsType("TB");
			} else {
				tradeItem.setOrderChannelsType("OTHERS");
			}
		} else {
			tradeItem.setOrderChannelsType("TB");
		}
		List<String> tradeList = new ArrayList<String>();
		tradeList.add(shipOrder.getOtherOrderNo());
		tradeItem.setTradeOrderList(tradeList);

		/**
		 * 如果手机号码为空，则传电话号码
		 */
		if (StringUtils.isNotEmpty(receiverInfo.getReceiverMobile())) {
			nameMsg = nameMsg + ":" + receiverInfo.getReceiverMobile();
			tradeItem.setConsigneePhone(receiverInfo.getReceiverMobile());
		} else {
			nameMsg = nameMsg + ":" + receiverInfo.getReceiverPhone();
			tradeItem.setConsigneePhone(receiverInfo.getReceiverPhone());
		}

		// 收货信息
		WaybillAddress address1 = new WaybillAddress();
		address1.setArea(receiverInfo.getReceiverArea());
		address1.setProvince(receiverInfo.getReceiverProvince()); // 省份
		// address.setTown(""); //城镇
		address1.setAddressDetail(AddressUtil.cainiaoFormat(receiverInfo.getReceiverAddress().replaceAll("/", "")
				.replaceAll("\"", "").replaceAll("\\\\", "").replaceAll("\'", "")));
		address1.setCity(receiverInfo.getReceiverCity());
		tradeItem.setConsigneeAddress(address1);

		tradeItem.setSendPhone(centro.getPhone());
		tradeItem.setWeight(100L);
		tradeItem.setSendName(user.getSubscriberName());

		List<PackageItem> packageList = new ArrayList<PackageItem>();
		PackageItem packageItem = new PackageItem();
		if (items != null && items.length() > 50) {
			packageItem.setItemName(items.substring(0, 50));
		} else {
			packageItem.setItemName(items);
		}
		String count = String.valueOf(shipOrder.getOrderItemList().size());
		packageItem.setCount(Long.parseLong(count));
		packageList.add(packageItem);
		tradeItem.setPackageItems(packageList);

		List<LogisticsService> logisticsList = new ArrayList<LogisticsService>();
		LogisticsService logisticsItem = new LogisticsService();

		logisticsItem.setServiceValue4Json("{\"value\": \"NORMAL\"}");
		logisticsItem.setServiceCode("SVC-DELIVERY-ENV");
		logisticsList.add(logisticsItem);
		tradeItem.setLogisticsServiceList(logisticsList);

		// 物流模式枚举
		tradeItem.setProductType("STANDARD_EXPRESS");

		tradeItem.setRealUserId(user.getTbUserId());

		tradeItem.setVolume(1L);
		tradeItem.setWeight(10L);
		// packageId
		tradeItem.setPackageId(shipOrder.getId());
		tradeOrderInfoList.add(tradeItem);

		waybillApplyNewRequest.setTradeOrderInfoCols(tradeOrderInfoList);

		System.err.println("billGet:" + waybillApplyNewRequest.toString());
		req.setWaybillApplyNewRequest(waybillApplyNewRequest.toString());

		// req.setWaybillApplyNewRequest("{'cp_code':'YTO','shipping_address':{'address_detail':'湖南省湘潭市岳塘区双拥南路25号高新创业园A3栋3楼星宇物流客服部','area':'岳塘区','city':'湘潭市','province':'湖南省'},'trade_order_info_cols':[{'consignee_address':{'address_detail':'重庆市九龙坡区石桥铺正街254号','area':'九龙坡区','city':'重庆市','province':'重庆'},'consignee_name':'谢黎','consignee_phone':'18716330842','logistics_service_list':[{'service_code':'SVC-DELIVERY-ENV','service_value4_json':'{\'value\':
		// \'NORMAL\'}'}],'order_channels_type':'TB','package_id':'01
		// -1','package_items':[{'count':1,'item_name':'itemName0'}],'product_type':'STANDARD_EXPRESS','real_user_id':2599053189,'send_name':'xinyun乐器旗舰店','send_phone':'13500000000','trade_order_list':['1195085016717298'],'volume':1,'weight':10}]}");
		logger.debug(req.getTextParams());
		try {
			initSessionKey();

			WlbWaybillIGetResponse response = client.execute(req, StoreConstants.rookie_sessionKey);
			System.err.println("sessionKey:" + StoreConstants.rookie_sessionKey);
			retMap.put("message", "taobao.wlb.waybill.i.get 接口调用成功!");
			retMap.put("tradeId", "" + shipOrder.getId());
			logger.debug("菜鸟面单返回:" + response.getBody());
			List<WaybillApplyNewInfo> waybillApplyNewCols = response.getWaybillApplyNewCols();
			if (waybillApplyNewCols != null && waybillApplyNewCols.size() > 0) {
				WaybillApplyNewInfo waybillApplyNewInfo = waybillApplyNewCols.get(0);
				try {

					// 更新出库单状态
					List<Map<String, String>> paramMapList = new ArrayList<Map<String, String>>();
					Map<String, String> paramMap = new HashMap<String, String>();
					paramMap.put("id", "" + shipOrder.getId());
					paramMap.put("expressCompany", cpCode);
					paramMap.put("expressOrderno", waybillApplyNewInfo.getWaybillCode());

					paramMap.put("status", OrderStatusEnum.WMS_PRINT.getKey());

					// paramMap.put("status",
					// ShipOrder.SendOrderStatus.WAIT_BUYER_RECEIVED);
					paramMap.put("orderFlag", waybillApplyNewInfo.getShortAddress()); // 大头
					paramMap.put("sellerMobile", waybillApplyNewInfo.getPackageCenterName()); // 收货网点名称
					paramMap.put("sellerPhone", waybillApplyNewInfo.getPackageCenterCode()); // 收货网点CODE
					paramMap.put("batchCode", batchCode);// 打印批次号
					paramMapList.add(paramMap);
					this.shipOrderService.setSendOrderExpressAndStatusById(paramMapList);
					// 更新订单状态
					// tradeService.updateTradeStatus(trade.getId(),
					// Trade.Status.TRADE_WAIT_EXPRESS_NOFITY);
					retMap.put("flag", "成功");
					retMap.put("orderNo", waybillApplyNewInfo.getWaybillCode());
					retMap.put("code", "200");
				} catch (Exception e) {
					e.printStackTrace();
					retMap.put("flag", "接口调用成功,数据反写系统失败");
					retMap.put("code", "501");
					retMap.put("errorInfo", nameMsg + ";msg:" + "数据反写系统失败;" + e.getMessage());
				}

			} else {
				retMap.put("flag", "接口调用成功,返回数据为空");
				retMap.put("code", "502");
				retMap.put("errorInfo", nameMsg + ";msg:" + response.getBody());
			}

		} catch (Exception e) {
			retMap.put("flag", "接口调用失败");
			retMap.put("message", "taobao.wlb.waybill.i.get 接口调用失败!");
			retMap.put("code", "500");
			retMap.put("errorInfo", nameMsg + ";msg:" + "接口异常:" + e.getMessage());

		}
		return retMap;
	}

	/**
	 * 初始化sessionKey
	 */
	private void initSessionKey() {
		Map<String, Object> params = new HashMap<String, Object>();
		String type = StoreSystemItemEnums.sessionKey.getKey();
		params.put("type", type);
		List<SystemItem> itemList = this.systemItemDao.findSystemItemByList(params);
		SystemItem item = itemList.get(0);
		String sessionKey = item.getValue();
		StoreConstants.rookie_sessionKey = sessionKey;

	}

	private HttpResponse getHttpResponse(String xml) throws ClientProtocolException, IOException {
		System.out.println("xml:" + xml);
		String verifyCode = Util.md5EncryptAndBase64(xml + checkword);

		List<NameValuePair> nvps = new ArrayList<NameValuePair>();
		nvps.add(new BasicNameValuePair("xml", xml));
		nvps.add(new BasicNameValuePair("verifyCode", verifyCode));

		HttpClient httpclient = getHttpClient(port);

		HttpPost httpPost = new HttpPost(order_service_url);

		httpPost.setEntity(new UrlEncodedFormEntity(nvps, Consts.UTF_8));

		HttpResponse response = httpclient.execute(httpPost);

		return null;
	}

	private HttpClient getHttpClient(int port) {
		PoolingClientConnectionManager pcm = new PoolingClientConnectionManager();
		SSLContext ctx = null;
		try {
			ctx = SSLContext.getInstance("TLS");
			X509TrustManager x509 = new X509TrustManager() {
				@Override
				public void checkClientTrusted(java.security.cert.X509Certificate[] chain, String authType)
						throws java.security.cert.CertificateException {
					// TODO Auto-generated method stub
				}

				@Override
				public void checkServerTrusted(java.security.cert.X509Certificate[] chain, String authType)
						throws java.security.cert.CertificateException {
					// TODO Auto-generated method stub
				}

				@Override
				public java.security.cert.X509Certificate[] getAcceptedIssuers() {
					// TODO Auto-generated method stub
					return null;
				}

			};
			ctx.init(null, new TrustManager[] { x509 }, null);
		} catch (Exception e) {
			e.printStackTrace();
		}

		SSLSocketFactory ssf = new SSLSocketFactory(ctx, SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);
		Scheme sch = new Scheme("https", port, ssf);
		pcm.getSchemeRegistry().register(sch);
		return null;
	}

	/**
	 * taobao.wlb.waybill.i.cancel 商家取消获取的电子面单号v1.0
	 * 
	 * @param url
	 */
	@Override
	public Map<String, String> billCancel(ShipOrder shipOrder) {

		Map<String, Object> params = new HashMap<String, Object>();

		TaobaoClient client = new DefaultTaobaoClient(StoreConstants.rookie_url, StoreConstants.rookie_appkey,
				StoreConstants.rookie_secret);

		Map<String, String> retMap = new HashMap<String, String>();

		User user = this.userDao.getUserById(shipOrder.getUser().getId());
		// {"cp_code": "POSTB",
		// "real_user_id": 89346737,
		// "trade_order_list": ["order"],
		// "waybill_code": "yourCode"}
		WlbWaybillICancelRequest req = new WlbWaybillICancelRequest();
		WaybillApplyCancelRequest cancel = new WaybillApplyCancelRequest();

		cancel.setCpCode(shipOrder.getTmsServiceCode());
		cancel.setRealUserId(user.getTbUserId());

		List<String> orderList = new ArrayList<String>();

		if (shipOrder != null) {
			params.put("orderId", shipOrder.getId());
			List<WmsConsignOrderItem> detailList = this.orderItemDao.getWmsConsignOrderItemByList(params);
			WmsConsignOrderItem detail = detailList.get(0);
			orderList.add(detail.getOrderSourceCode() == null ? shipOrder.getOtherOrderNo()
					: "" + detail.getOrderSourceCode());
		} else {
			orderList.add(shipOrder.getSystemSource() == null ? shipOrder.getOtherOrderNo()
					: "" + shipOrder.getSystemSource().getKey());
		}

		// orderList.add( trade.getTradeFrom()==null ?
		// trade.getLgAgingType():""+trade.getTradeFrom());
		cancel.setTradeOrderList(orderList);
		cancel.setPackageId(shipOrder.getId());
		cancel.setWaybillCode(shipOrder.getTmsOrderCode());
		System.err.println("WaybillCode:" + shipOrder.getTmsOrderCode());
		System.err.println("real_user_id:" + user.getTbUserId());
		System.err.println("cp_code:" + shipOrder.getTmsServiceCode());
		req.setWaybillApplyCancelRequest(cancel);
		System.err.println("订单取消:" + req.getTextParams());
		try {
			initSessionKey();
			WlbWaybillICancelResponse response = client.execute(req, StoreConstants.rookie_sessionKey);
			retMap.put("message", "taobao.wlb.waybill.i.cancel 接口调用成功!");
			retMap.put("tradeId", "" + shipOrder.getId());
			System.out.println("response:" + response.getBody());
			if (response.isSuccess()) {
				try {
					// 更新还原状态
					List<Map<String, String>> paramMapList = new ArrayList<Map<String, String>>();
					Map<String, String> paramMap = new HashMap<String, String>();
					paramMap.put("id", "" + shipOrder.getId());
					paramMap.put("expressCompany", "");
					paramMap.put("expressOrderno", "");
					paramMap.put("status", OrderStatusEnum.WMS_PRINT.getKey());
					paramMap.put("orderFlag", ""); // 大头
					paramMap.put("sellerMobile", ""); // 收货网点名称
					paramMap.put("sellerPhone", ""); // 收货网点CODE
					paramMapList.add(paramMap);
					shipOrderService.setSendOrderExpressAndStatusById(paramMapList);
					retMap.put("flag", "成功");
					retMap.put("code", "200");
				} catch (Exception e) {
					retMap.put("flag", "接口调用成功,反写单据状态失败");
					retMap.put("code", "501");
					e.printStackTrace();
				}
			} else {
				retMap.put("flag", "接口调用成功,无效单据或取消失败");
				retMap.put("code", "502");
				retMap.put("error", response.getBody());
			}
		} catch (Exception e) {
			e.printStackTrace();
			retMap.put("flag", "接口调用失败");
			retMap.put("message", "taobao.wlb.waybill.i.cancel 接口调用失败!");
			retMap.put("code", "500");
			e.printStackTrace();
		}
		return retMap;
	}

	/**
	 * taobao.wlb.waybill.i.querydetail (查面单号状态v1.0)
	 * 
	 * @param code
	 *            订单号
	 * @return 此订单号状态
	 */
	@Override
	public Map<String, Object> queryDetail(String code) {
		TaobaoClient client = new DefaultTaobaoClient(StoreConstants.rookie_url, StoreConstants.rookie_appkey,
				StoreConstants.rookie_secret);
		WlbWaybillIQuerydetailRequest req = new WlbWaybillIQuerydetailRequest();
		WaybillDetailQueryRequest obj1 = new WaybillDetailQueryRequest();

		List<String> codeList = new ArrayList<String>();
		codeList.add(code);
		obj1.setWaybillCodes(codeList);
		req.setWaybillDetailQueryRequest(obj1);
		WlbWaybillIQuerydetailResponse rsp;
		System.out.println(req.getTextParams());
		initSessionKey();
		System.err.println("sessionKey" + StoreConstants.rookie_sessionKey);
		System.out.println("sessionKey" + StoreConstants.rookie_sessionKey);
		try {
			rsp = client.execute(req, StoreConstants.rookie_sessionKey);
			System.out.println(rsp.getBody());
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}

	private void refreshTemplate() {
		if (this.templateMap == null) {
			this.templateMap = new HashMap<String, Object>();
		}
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("type", "isv_template");
		List<SystemItem> sysItem = this.systemItemDao.findSystemItemByList(params);
		for (int i = 0; i < sysItem.size(); i++) {
			SystemItem obj = sysItem.get(i);
			this.templateMap.put(obj.getDescription(), obj.getValue());
		}
	}

}
