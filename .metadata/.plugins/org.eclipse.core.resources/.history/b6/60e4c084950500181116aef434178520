package com.xinyu.service.caoniao;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import com.sun.swing.internal.plaf.metal.resources.metal_zh_TW;
import com.taobao.api.internal.toplink.embedded.websocket.util.StringUtil;
import com.taobao.pac.sdk.cp.PacClient;
import com.taobao.pac.sdk.cp.SendSysParams;
import com.taobao.pac.sdk.cp.dataobject.request.WMS_CONSIGN_ORDER_CONFIRM.ConsignItemInventory;
import com.taobao.pac.sdk.cp.dataobject.request.WMS_CONSIGN_ORDER_CONFIRM.ConsignOrderItem;
import com.taobao.pac.sdk.cp.dataobject.request.WMS_CONSIGN_ORDER_CONFIRM.ConsignTmsItem;
import com.taobao.pac.sdk.cp.dataobject.request.WMS_CONSIGN_ORDER_CONFIRM.ConsignTmsOrder;
import com.taobao.pac.sdk.cp.dataobject.request.WMS_CONSIGN_ORDER_CONFIRM.WmsConsignOrderConfirmCallbackRequest;
import com.taobao.pac.sdk.cp.dataobject.response.WMS_CONSIGN_ORDER_CONFIRM.WmsConsignOrderConfirmResponse;
import com.xinyu.dao.base.ItemGroupDao;
import com.xinyu.model.base.Item;
import com.xinyu.model.base.ItemGroup;
import com.xinyu.model.base.RdsConstants;
import com.xinyu.model.base.ReceiverInfo;
import com.xinyu.model.inventory.enums.InventoryTypeEnum;
import com.xinyu.model.system.enums.OperatorModel;
import com.xinyu.model.system.enums.OrderStatusEnum;
import com.xinyu.model.system.Account;
import com.xinyu.model.trade.ShipOrder;
import com.xinyu.model.trade.ShipOrderGroup;
import com.xinyu.model.trade.ShipOrderOperator;
import com.xinyu.model.trade.TmsOrder;
import com.xinyu.model.trade.TmsOrderItem;
import com.xinyu.model.trade.WmsConsignOrderItem;
import com.xinyu.model.util.MyException;
import com.xinyu.service.common.Constants;
import com.xinyu.service.inventory.InventoryService;
import com.xinyu.service.system.ItemService;
import com.xinyu.service.trade.ReceiverInfoService;
import com.xinyu.service.trade.ShipOrderGroupService;
import com.xinyu.service.trade.ShipOrderOperatorService;
import com.xinyu.service.trade.ShipOrderService;
import com.xinyu.service.trade.TmsOrderService;
import com.xinyu.service.trade.WmsConsignOrderItemService;
import com.xinyu.service.util.CaiNiaoPacClient;
import com.xinyu.service.util.IRedisProxy;
import com.xinyu.service.util.ObjectTranscoder;
import com.xinyu.service.util.RedisUtil;

import redis.clients.jedis.Jedis;

@Component
public class WmsConsignOrderConfirmService {

	public static final Logger logger = Logger.getLogger(WmsConsignOrderConfirmService.class);
	@Autowired
	private ShipOrderService orderService;
	@Autowired
	private ShipOrderOperatorService shipOrderOperatorService;
	@Autowired
	private WmsConsignOrderItemService orderItemService;
	@Autowired
	private ItemService itemService;
	@Autowired
	private InventoryService inventoryService;
	@Autowired
	private ShipOrderGroupService shipOrderGroupService;
	@Autowired
	private ItemGroupDao itemGroupDao;
	@Autowired
	private IRedisProxy redisProxy;
	@Autowired
	private TmsOrderService tmsOrderService;
	@Autowired
	private ReceiverInfoService receiverInfoService;
	
	private SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");
	/**
	 * 订单发货确认
	 * @param account2 
	 * @param request
	 * @param params
	 * @return
	 * @throws Exception 
	 */
	public  Map<String,Object> submitConsignOrderConfirm(String orderId, Account account) throws Exception{
		WmsConsignOrderConfirmCallbackRequest request=new WmsConsignOrderConfirmCallbackRequest();
		SendSysParams params=new SendSysParams();
//		params.setFromCode("227856_rCodeRS");
		params.setFromCode(Constants.cainiao_fromCode);
 		List<Map<String, Object>> paramsList = new ArrayList<Map<String,Object>>();
 		String type = "confirm";
		Map<String,String> memcachedMap=new HashMap<String, String>();
	
		
		Map<String,Object> resultMap=new HashMap<String, Object>();		
		ShipOrder shipOrder = this.orderService.findShipOrderById(orderId);
	
		ReceiverInfo receiverInfo=this.receiverInfoService.getReceiverInfoById(shipOrder.getReceiverInfo().getId());
		
		shipOrder.setReceiverInfo(receiverInfo);
		this.buidlConsignOrderCallBack(shipOrder, request, params, paramsList,memcachedMap);
		
		WmsConsignOrderConfirmResponse response =CaiNiaoPacClient.getClient().send(request, params);
		
		/**
		 * 写入缓存
		 * 套餐与非套餐的订单分开处理,如果是套餐，重新再写一次缓存
		 */
		if(StringUtils.isNotEmpty(shipOrder.getItemGroupStatus()) && shipOrder.getItemGroupStatus().equals(ShipOrder.item_Group_Status)){
			this.buildMemcachedMapByShipOrderGroup(memcachedMap, shipOrder);
			memcachedMap.put("orderInfo", shipOrder.getId()+"||"+String.valueOf(shipOrder.getTotalWeight()==null?"0":shipOrder.getTotalWeight())+"||"+shipOrder.getUser().getId());
			memcachedMap.put("orderDate", sdf.format(new Date()));
			memcachedMap.put("state", );
			memcachedMap.put("totalWeight", String.valueOf(shipOrder.getTotalWeight()));
			memcachedMap.put("user", String.valueOf(shipOrder.getUser().getId()));
			logger.error("菜鸟订单缓存数据:"+shipOrder.getTmsOrderCode()+"||"+memcachedMap);
			this.saveMemcachedInfo(shipOrder.getTmsOrderCode(), memcachedMap);
		}
		
		if(response.isSuccess()){
			
			logger.debug("success:"+response.getErrorCode());		
			if(shipOrder!=null && shipOrder.getStatus().equals(OrderStatusEnum.WMS_FINASH)){
				resultMap.put("ret", 1);
				this.createShipOrderOperator(shipOrder,account,response.getErrorMsg());		
			}else{
				//发货确认成功，生成操作日志
				this.createShipOrderOperator(shipOrder,account,response.getErrorMsg());			
				//发货确认成功,交易订单更新库存
	 			this.inventoryService.updateInventoryByOrder(paramsList,type);			
				/**
				 * 修改订单状态信息
				 */
				Map<String,Object> p=new HashMap<String, Object>();
				p.put("id", orderId);
				p.put("status", OrderStatusEnum.WMS_FINASH);
				this.orderService.updateShipOrderStatus(p);		
				p.clear();
				p.put("orderId", orderId);
				List<TmsOrder> tmsOrderList=this.tmsOrderService.getTmsOrderByList(p);
				for(int i=0;tmsOrderList!=null && i<tmsOrderList.size();i++){
					TmsOrder tmsOrder=tmsOrderList.get(i);
					tmsOrder.setOrderStatus(OrderStatusEnum.WMS_FINASH);
					this.tmsOrderService.updateTmsOrder(tmsOrder);
				}
				resultMap.put("ret", 1);
			}
			
		}else{
			
			logger.debug("失败:"+response.getErrorCode()+"|"+response.getErrorMsg());
			resultMap.put("ret", 0);
			resultMap.put("msg", response.getErrorMsg());
			if(response.getErrorMsg().indexOf("订单下发中")!=-1){
				logger.error("发货失败时，订单重新进入接单序列");
				this.redisProxy.set(RdsConstants.ORDER_ACCEPT+shipOrder.getId(), shipOrder.getId());
			}
			//发货确认失败，生成操作日志
			this.createShipOrderOperator(shipOrder,account,response.getErrorMsg());
		}
		return resultMap;
	}
	
	
	/**
	 * 套餐的验货处理
	 * @param memcached
	 * @param order
	 */
	private void buildMemcachedMapByShipOrderGroup(Map<String,String> memcachedMap,ShipOrder order){
		memcachedMap=new HashMap<String, String>();
		Map<String,Object> params=new HashMap<String, Object>();
		params.put("orderId", order.getId());
		List<ShipOrderGroup> groupList=this.shipOrderGroupService.getShipOrderGroupByList(params);
		for(int i=0;groupList!=null && i<groupList.size();i++){
			ShipOrderGroup group=groupList.get(i);
			ItemGroup itemGroup=this.itemGroupDao.getItemGroupById(group.getItemGroup().getId());
			memcachedMap.put(itemGroup.getBarCode(),itemGroup.getId()+"||"+group.getQuantity()+"||"+ShipOrder.item_Group_Status);
		}
//		memcachedMap.put("orderInfo", order.getId()+"||"+order.getTotalWeight()+"||"+order.getUser().getId());
//		logger.error("菜鸟套餐的验货处理:"+order.getTmsOrderCode()+"--"+memcachedMap);
//		this.saveMemcachedInfo(order.getTmsOrderCode(), memcachedMap,manager);
	}
	/**
	 * 订单操作日志
	 * @param shipOrder
	 * @param account
	 * @param errorMsg
	 * */
	private void createShipOrderOperator(ShipOrder shipOrder, Account account, String errorMsg) {
		ShipOrderOperator operator = new ShipOrderOperator();
		operator.generateId();
//		operator.setCu("7d6f6f97-a988-45a2-a3de-zc8888centro");
		operator.setAccount(account);
		operator.setOperatorDate(new Date());
		operator.setDescription("发货确认："+(shipOrder.getOrderCode()==null?shipOrder.getId():shipOrder.getOrderCode())+"|"+errorMsg);
		operator.setOldValue(OrderStatusEnum.WMS_PRINT.getKey());
		operator.setNewValue(shipOrder.getStatus().getKey());
		operator.setOperatorModel(OperatorModel.TRADE_CONFIRM);
		operator.setShipOrder(shipOrder);
		this.shipOrderOperatorService.saveShipOrderOperator(operator);
	}

	/**
	 * 写入缓存
	 * @param key
	 * @param value
	 */
	private void saveMemcachedInfo(String key,Map<String,String> value){
		this.redisProxy.set(key.getBytes(), ObjectTranscoder.serialize(value));
		logger.error("菜鸟缓存写入:"+key+"|"+value);
	}


	/**
	 * 组建发货确认请求对象
	 * @param request
	 * @param params
	 * @param paramsList 
	 * @throws MyException 
	 */
	private void buidlConsignOrderCallBack(ShipOrder order,WmsConsignOrderConfirmCallbackRequest request,SendSysParams params, List<Map<String, Object>> paramsList,Map<String,String> memcachedMap) throws Exception{
		request.setOrderConfirmTime(new Date());
//		ShipOrder order=this.orderService.findShipOrderById(orderId);
		request.setOrderCode(order.getOrderCode());
		request.setOrderType(order.getOrderType());
//		request.setOutBizCode(order.getou);
		request.setTimeZone(order.getTimeZone());
		/**
		 * 订单商品信息
		 */
//		request.setOrderItems(null);
		
		/**
		 * 运单信息
		 */
//		request.setTmsOrders(tmsOrders);
		/**
		 * 发票信息
		 */
//		request.setInvoinceConfirms(invoinceConfirms);
		
		buildTmOrdersAndOrderItems(order, request, paramsList,memcachedMap);
		
	}
	/**
	 * 构建订单商品明细与订单发货信息
	 * @param order
	 * @param request
	 * @param paramsList 
	 * @throws MyException 
	 */
	private void buildTmOrdersAndOrderItems(ShipOrder order,WmsConsignOrderConfirmCallbackRequest request, List<Map<String, Object>> paramsList,Map<String,String> memcachedMap) throws Exception{
		Map<String,Object> params=new HashMap<String, Object>();
		params.put("orderId", order.getId());
		List<ConsignOrderItem> orderItemList=new ArrayList<ConsignOrderItem>();
		List<ConsignTmsOrder> tmsOrderList=new ArrayList<ConsignTmsOrder>();
		
		int index=0,flag=0;
		int packageWeight=0;
		int packageLength=0,packageHeight=0,packageWidth=0,packageVolume=0;
		List<WmsConsignOrderItem> itemList=this.orderItemService.getWmsConsignOrderItemByList(params);
	
		int barCodeCount=0;
		for(int i=0;itemList!=null && i<itemList.size();i++){
			WmsConsignOrderItem item=itemList.get(i);
			Item itemObj=this.itemService.getItem(item.getItem().getId());
		
			ConsignOrderItem orderItem=new ConsignOrderItem();
			ConsignTmsItem tmsItem=new ConsignTmsItem();
			orderItem.setOrderItemId(item.getOrderItemId());
			List<ConsignItemInventory> inventoryItems=new ArrayList<ConsignItemInventory>();
			ConsignItemInventory inventory=new ConsignItemInventory();
			inventory.setInventoryType(item.getInventoryType());
			inventory.setQuantity(new Long(item.getItemQuantity()).intValue());
			inventory.setBatchCode(item.getBatchCode());
			inventoryItems.add(inventory);

			tmsItem.setBatchCode(item.getBatchCode());
			tmsItem.setItemCode(item.getItemCode());
			tmsItem.setItemQuantity(new Long(item.getItemQuantity()).intValue());
			tmsItem.setOrderItemId(item.getOrderItemId());
			/**
			 * 统计整个包裹的重量
			 */
			if(item.getItemOutQuantity()!=null && (item.getItemOutQuantity()>0 || index==1)){
				packageWeight+=(itemObj.getWmsGrossWeight()*item.getItemBatchQuantity());
				packageHeight+=(itemObj.getWmsHeight()*item.getItemBatchQuantity());
				packageLength+=(itemObj.getWmsLength()*item.getItemBatchQuantity());
				packageWidth+=(itemObj.getWmsWidth()*item.getItemBatchQuantity());
				packageVolume+=(itemObj.getWmsVolume()*item.getItemBatchQuantity());
				index=1;
				if(item.getItemQuantity()==item.getItemOutQuantity()){
					flag++;
				}
			}else{
				packageWeight+=(itemObj.getWmsGrossWeight()==null?0:itemObj.getWmsGrossWeight()*item.getItemQuantity());
				packageHeight+=(itemObj.getWmsHeight()==null?0:itemObj.getWmsHeight()*item.getItemQuantity());
				packageLength+=(itemObj.getWmsLength()==null?0:itemObj.getWmsLength()*item.getItemQuantity());
				packageWidth+=(itemObj.getWmsWidth()==null?0:itemObj.getWmsWidth()*item.getItemQuantity());
				packageVolume+=(itemObj.getWmsVolume()==null?0:itemObj.getWmsVolume()*item.getItemQuantity());
			}
			tmsItem.setItemId(itemObj.getItemId());
			tmsItem.setItemCode(itemObj.getItemCode());
			orderItem.setItemCode(itemObj.getItemCode());
			orderItem.setItems(inventoryItems);
			orderItemList.add(orderItem);
//			tmsItemList.add(tmsItem);
			
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("itemId", itemObj.getId());
			map.put("quantity", item.getItemQuantity());
			map.put("inventoryType", InventoryTypeEnum.getInventoryType(""+item.getInventoryType()));
			map.put("ownerUserId", item.getOwnerUserId());
			map.put("orderCode", order.getOrderCode());
			map.put("orderId", order.getId());
			paramsList.add(map);
		}
		
		
		
		/**
		 * 发货运单信息
		 */
		if(flag==itemList.size()){
			request.setConfirmType(0);
		}else{
			request.setConfirmType(index);
		}
		int zcIndex=0,zpIndex=0;
		Map<String,Object> p=new HashMap<String, Object>();
		p.put("orderId", order.getId());
		List<TmsOrder> tmsList=this.tmsOrderService.getTmsOrderByList(p);
		for(int k=0;tmsList!=null && k<tmsList.size();k++){
			TmsOrder tmsOrder=tmsList.get(k);
			ConsignTmsOrder consignTmsOrder=new ConsignTmsOrder();
			
			consignTmsOrder.setTmsCode(tmsOrder.getCode());//快递公司名称编码
			consignTmsOrder.setTmsOrderCode(tmsOrder.getOrderCode());
			consignTmsOrder.setPackageCode(tmsOrder.getId());
			consignTmsOrder.setPackageHeight(new Double(tmsOrder.getPackageHeight()).intValue());
			consignTmsOrder.setPackageLength(new Double(tmsOrder.getPackageLength()).intValue());
			consignTmsOrder.setPackageWidth(new Double(tmsOrder.getPackageWidth()).intValue());
			consignTmsOrder.setPackageVolume(new Double(tmsOrder.getPackageVolume()).longValue());
			consignTmsOrder.setPackageWeight(new Double(tmsOrder.getPackageHeight()).intValue());
			p.clear();
			p.put("tmsOrderId", tmsOrder.getId());
			List<TmsOrderItem> tmsOrderItem=this.tmsOrderService.getTmsOrderItemByList(p);
			List<ConsignTmsItem> tmsItemList=new ArrayList<ConsignTmsItem>();
			for(int kk=0;tmsOrderItem!=null && kk<tmsOrderItem.size();kk++){
				TmsOrderItem tmsItemObj=tmsOrderItem.get(kk);
				ConsignTmsItem tmsItem=new ConsignTmsItem();
				tmsItem.setBatchCode(tmsOrder.getBatchCode());
				tmsItem.setItemCode(tmsItemObj.getItemCode());
				tmsItem.setItemQuantity(new Long(tmsItemObj.getItemQuantity()).intValue());
				tmsItem.setOrderItemId(tmsItemObj.getOrderItemId());
				tmsItem.setItemId(tmsItemObj.getItemId());
				tmsItemList.add(tmsItem);
				Item itemObj=this.itemService.getItem(tmsItemObj.getItem().getId());
				if(itemObj.getItemType()!=null && itemObj.getItemType().equals("ZC")){
					zcIndex+=tmsItemObj.getItemQuantity();
					if(StringUtils.isNotEmpty(itemObj.getBarCode())){
						barCodeCount++;
					}
				}
				
				if(itemObj.getItemType()!=null && itemObj.getItemType().equals("ZP")){
					zpIndex+=tmsItemObj.getItemQuantity();
				}
				memcachedMap.put(StringUtils.isNotBlank(itemObj.getBarCode())?itemObj.getBarCode():"T", itemObj.getId()+"||"+(tmsItemObj.getItemQuantity()==null?"0":String.valueOf(tmsItemObj.getItemQuantity()))+"||"+itemObj.getItemType());
			}
			consignTmsOrder.setTmsItems(tmsItemList);
			tmsOrderList.add(consignTmsOrder);
			memcachedMap.put("zcIndex",String.valueOf(zcIndex));
			memcachedMap.put("zpIndex",String.valueOf(zpIndex));
			memcachedMap.put("orderInfo", order.getId()+"||"+String.valueOf(order.getTotalWeight()==null?"0":order.getTotalWeight())+"||"+order.getUser().getId());
			memcachedMap.put("orderDate", sdf.format(new Date()));
			memcachedMap.put("state", order.getReceiverInfo()!=null?order.getReceiverInfo().getReceiverProvince():"");
			memcachedMap.put("totalWeight", String.valueOf(order.getTotalWeight()));
			memcachedMap.put("user", String.valueOf(order.getUser().getId()));
			logger.error("菜鸟订单缓存数据:"+order.getTmsOrderCode()+"||"+memcachedMap);
			this.saveMemcachedInfo(tmsOrder.getOrderCode(), memcachedMap);
		}
		if(zcIndex>0 && barCodeCount==0){
			throw new MyException("订单:"+order.getOrderCode()+"产品条码不能为空!");
		}
	
		request.setOrderItems(orderItemList);
		request.setOutBizCode(order.getTmsOrderCode());
		request.setTmsOrders(tmsOrderList);
	}
	
	
	
}
