package com.graby.store.admin.local;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.graby.store.admin.web.BaseController;
import com.graby.store.entity.Item;
import com.graby.store.entity.User;
import com.graby.store.entity.local.LocalBoxOut;
import com.graby.store.entity.local.LocalPlate;
import com.graby.store.remote.ItemRemote;
import com.graby.store.remote.LocalRemote;
import com.graby.store.remote.UserRemote;
import com.graby.store.service.base.UserService;
import com.graby.store.service.item.ItemService;
import com.graby.store.service.local.LocalService;
import com.graby.store.util.StringUtils;

@Controller
@RequestMapping(value = "/local")
public class AdminLocalController extends BaseController {

	@Autowired
	private LocalRemote localService;

	@Autowired
	private ItemRemote itemService;
	@Autowired
	private UserRemote userservice;

	@RequestMapping(value = "inIt")
	@ResponseBody
	public String inIt() {
		String[] boxsD = { "A", "B", "C", "D"};
		
		//12排
		int crow = 13;
		for(int c = 1 ; c<crow;c++)
		for (int i = 1; i < 6; i++) { //层
			for(int j= 0 , size  = boxsD.length;j<size;j++){ //位
				LocalBoxOut boxOut = new LocalBoxOut();
				boxOut.setBoxOut(boxsD[j]);
				String  source =  ""+c;
				boxOut.setRow(StringUtils.formatAddZero(3, source));
				boxOut.setFloor("" + i);
				boxOut.setState("0,0,0");
				localService.saveLocalBoxOut(boxOut);
			}
		}
		
		
		String[] boxsI = { "A", "B", "C", "D","E","F","G","H","I"};
		String[] boxsE = { "A", "B", "C", "D","E"};
		String[] boxsM = { "A", "B", "C", "D","E","F","G","H","I","J","K","L","M"};
		String[] boxsN = { "A", "B", "C", "D","E","F","G","H","I","J","K","L","M","N"};
		String[] boxsO = { "A", "B", "C", "D","E","F","G","H","I","J","K","L","M","N","O"};
		String[] boxsJ = { "A", "B", "C", "D","E","F","G","H","I","J"};
		String[] boxsK = { "A", "B", "C", "D","E","F","G","H","I","J","K",};
		String[] boxsL = { "A", "B", "C", "D","E","F","G","H","I","J","K","L"};
		
//		五层货架21A-I
		crow = 22;
		for (int c = 13; c < crow; c++){
			for (int i = 1; i < 6; i++) { // 层
				for (int j = 0, size = boxsI.length; j < size; j++) { // 位
					LocalBoxOut boxOut = new LocalBoxOut();
					boxOut.setBoxOut(boxsI[j]);
					String source = ""+c;
					boxOut.setRow(StringUtils.formatAddZero(3, source));
					boxOut.setFloor("" + i);
					boxOut.setState("0,0,0");
					localService.saveLocalBoxOut(boxOut);
				}
			}
		}
//		22A-E
		for (int i = 1; i < 6; i++) { // 层
			for (int j = 0, size = boxsE.length; j < size; j++) { // 位
				LocalBoxOut boxOut = new LocalBoxOut();
				boxOut.setBoxOut(boxsE[j]);
				String source = ""+22;
				boxOut.setRow(StringUtils.formatAddZero(3, source));
				boxOut.setFloor("" + i);
				boxOut.setState("0,0,0");
				localService.saveLocalBoxOut(boxOut);
			}
		}
		
		
//		五层货架35A-I						
		crow=  36;
		for (int c = 23; c < crow; c++){
			for (int i = 1; i < 6; i++) { // 层
				for (int j = 0, size = boxsI.length; j < size; j++) { // 位
					LocalBoxOut boxOut = new LocalBoxOut();
					boxOut.setBoxOut(boxsI[j]);
					String source = ""+c;
					boxOut.setRow(StringUtils.formatAddZero(3, source));
					boxOut.setFloor("" + i);
					boxOut.setState("0,0,0");
					localService.saveLocalBoxOut(boxOut);
				}
			}
		}
		
//		五层货架36A-M						36A-M	卡位195	
//		五层货架37A-M						37A-M	卡位195	
//		五层货架38A-M						38A-M	卡位195	585
		
		crow=  39;
		for (int c = 36; c < crow; c++){
			for (int i = 1; i < 6; i++) { // 层
				for (int j = 0, size = boxsM.length; j < size; j++) { // 位
					LocalBoxOut boxOut = new LocalBoxOut();
					boxOut.setBoxOut(boxsM[j]);
					String source = ""+c;
					boxOut.setRow(StringUtils.formatAddZero(3, source));
					boxOut.setFloor("" + i);
					boxOut.setState("0,0,0");
					localService.saveLocalBoxOut(boxOut);
				}
			}
		}
		
		
//		五层货架39A-N						39A-N	卡位210	
//		五层货架40A-N						40A-N	卡位210	
//		五层货架41A-N						41A-N	卡位210	
//		五层货架42A-N						42A-N	卡位210	840
		crow=  43;
		for (int c = 39; c < crow; c++){
			for (int i = 1; i < 6; i++) { // 层
				for (int j = 0, size = boxsN.length; j < size; j++) { // 位
					LocalBoxOut boxOut = new LocalBoxOut();
					boxOut.setBoxOut(boxsN[j]);
					String source = ""+c;
					boxOut.setRow(StringUtils.formatAddZero(3, source));
					boxOut.setFloor("" + i);
					boxOut.setState("0,0,0");
					localService.saveLocalBoxOut(boxOut);
				}
			}
		}
		
//		五层货架43A-O						43A-O	卡位225	225
		for (int i = 1; i < 6; i++) { // 层
			for (int j = 0, size = boxsO.length; j < size; j++) { // 位
				LocalBoxOut boxOut = new LocalBoxOut();
				boxOut.setBoxOut(boxsO[j]);
				String source = ""+43;
				boxOut.setRow(StringUtils.formatAddZero(3, source));
				boxOut.setFloor("" + i);
				boxOut.setState("0,0,0");
				localService.saveLocalBoxOut(boxOut);
			}
		}
		
		
		
//		四层货架44A-J						44A-J	卡位116（A区少4卡位）	116
//		四层货架45A-J						45A-J	卡位110（过道少6卡位，A区少4卡位）	110
//		四层货架46A-J						46A-J	卡位110（过道少6卡位，A区少4卡位）	110
//		四层货架47A-J						47A-J	卡位110（过道少6卡位，A区少4卡位）	110
//		四层货架48A-J						48A-J	卡位110（过道少6卡位，A区少4卡位）	110
		
		crow=  49;
		for (int c = 44; c < crow; c++){
			for (int i = 1; i < 5; i++) { // 层
				for (int j = 0, size = boxsJ.length; j < size; j++) { // 位
					LocalBoxOut boxOut = new LocalBoxOut();
					boxOut.setBoxOut(boxsJ[j]);
					String source = ""+c;
					boxOut.setRow(StringUtils.formatAddZero(3, source));
					boxOut.setFloor("" + i);
					boxOut.setState("0,0,0");
					localService.saveLocalBoxOut(boxOut);
				}
			}
		}
		
//		四层货架49A-I						49A-I	卡位98（过道少6卡位，A区少4卡位）	98
//		四层货架50A-I						50A-I	卡位102（过道少6卡位）	102
//		四层货架51A-I						51A-I	卡位108	108
//		四层货架52A-I						52A-I	卡位102（过道少6卡位）	102
		
		crow=  53;
		for (int c = 49; c < crow; c++){
			for (int i = 1; i < 5; i++) { // 层
				for (int j = 0, size = boxsI.length; j < size; j++) { // 位
					LocalBoxOut boxOut = new LocalBoxOut();
					boxOut.setBoxOut(boxsI[j]);
					String source = ""+c;
					boxOut.setRow(StringUtils.formatAddZero(3, source));
					boxOut.setFloor("" + i);
					boxOut.setState("0,0,0");
					localService.saveLocalBoxOut(boxOut);
				}
			}
		}
		
//		四层货架53A-K						53A-K	卡位126（过道少6卡位）	126
		
		for (int i = 1; i < 5; i++) { // 层
			for (int j = 0, size = boxsK.length; j < size; j++) { // 位
				LocalBoxOut boxOut = new LocalBoxOut();
				boxOut.setBoxOut(boxsK[j]);
				String source = ""+53;
				boxOut.setRow(StringUtils.formatAddZero(3, source));
				boxOut.setFloor("" + i);
				boxOut.setState("0,0,0");
				localService.saveLocalBoxOut(boxOut);
			}
		}
		
//		四层货架54A-L						54A-L	卡位138（过道少6卡位）	
//		四层货架55A-L						55A-L	卡位138（过道少6卡位）	
//		四层货架56A-L						56A-L	卡位138（过道少6卡位）	
//		四层货架57A-L						57A-L	卡位138（过道少6卡位）	552
//		四层货架58A-L						58A-L	卡位144	144
		
		crow=  59;
		for (int c = 54; c < crow; c++){
			for (int i = 1; i < 5; i++) { // 层
				for (int j = 0, size = boxsL.length; j < size; j++) { // 位
					LocalBoxOut boxOut = new LocalBoxOut();
					boxOut.setBoxOut(boxsL[j]);
					String source = ""+c;
					boxOut.setRow(StringUtils.formatAddZero(3, source));
					boxOut.setFloor("" + i);
					boxOut.setState("0,0,0");
					localService.saveLocalBoxOut(boxOut);
				}
			}
		}
		
//		四层货架59A-N						59A-N	卡位168	168
//		四层货架60A-N						60A-N	卡位168	168

		crow=  61;
		for (int c = 59; c < crow; c++){
			for (int i = 1; i < 5; i++) { // 层
				for (int j = 0, size = boxsN.length; j < size; j++) { // 位
					LocalBoxOut boxOut = new LocalBoxOut();
					boxOut.setBoxOut(boxsN[j]);
					String source = ""+c;
					boxOut.setRow(StringUtils.formatAddZero(3, source));
					boxOut.setFloor("" + i);
					boxOut.setState("0,0,0");
					localService.saveLocalBoxOut(boxOut);
				}
			}
		}
		
		return "";
	}

	/**
	 * 商品查询
	 * 
	 * @return
	 */
	@RequestMapping(value = "getItem/{q}")
	@ResponseBody
	public Map<String, Object> getItem(@PathVariable("q") String q) {

		// itemService.findItmeByBarCodeAndUserId(null);

		return null;
	}
	
	
	
	/**
	 * 查询商品
	 * 
	 * @return
	 */
	@RequestMapping(value = "getLocalPlate/item/{itemId}")
	@ResponseBody
	public Map<String, Object> getLocalPlateByitemId(@PathVariable("itemId") int itemId) {

		Map<String, Object> retMap = new HashMap<String, Object>();
		try {
			List<LocalPlate> list = localService.getLocalPlateByItemId(itemId);
			retMap.put("list", buildLocalPlate(list,true));
			retMap.put("code", "200");
		} catch (Exception e) {
			e.printStackTrace();
			retMap.put("code", "500");
			retMap.put("error", e.getMessage());
		}
		return retMap;
	}

	/**
	 * 查询整体库位
	 * 
	 * @return
	 */
	@RequestMapping(value = "getBoxOutList/{row}")
	@ResponseBody
	public Map<String, Object> getBoxOutList(@PathVariable("row") String row) {

		Map<String, Object> retMap = new HashMap<String, Object>();
		try {
			Map<String, List<LocalBoxOut>> localBoxOutByRow = localService.getLocalBoxOutByRow(row);
			retMap.put(row, localBoxOutByRow);
			retMap.put("code", "200");
		} catch (Exception e) {
			e.printStackTrace();
			retMap.put("code", "500");
			retMap.put("error", e.getMessage());
		}
		return retMap;
	}

	/**
	 * 根据库位查询板位
	 * 
	 * @return
	 */
	@RequestMapping(value = "getLocalPlateList/{boxOutId}")
	@ResponseBody
	public Map<String, Object> getLocalPlateList(@PathVariable("boxOutId") int boxOutId) {
		Map<String, Object> retMap = new HashMap<String, Object>();
		try {
			List<LocalPlate> list = localService.getLocalPlateByBoxOutId(boxOutId);
			retMap.put("list", buildLocalPlate(list,false));
			retMap.put("code", "200");
		} catch (Exception e) {
			e.printStackTrace();
			retMap.put("code", "500");
			retMap.put("error", e.getMessage());
		}
		return retMap;
	}

	/**
	 * 根据条码查询商品
	 * 
	 * @param barCode
	 * @return
	 */
	@RequestMapping(value = "getLocalItemByBarCode/{barCode}")
	@ResponseBody
	public Map<String, Object> getLocalItemByBarCode(@PathVariable("barCode") String barCode) {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		try {
			List<Map<String,Object>> mapList=new ArrayList<Map<String,Object>>();
			List<Item> itemList = this.itemService.findItmeByBarCodes(barCode);
			for(int i=0;itemList!=null && i<itemList.size();i++){
				Item item=itemList.get(i);
				Map<String,Object> obj=new HashMap<String, Object>();
				obj.put("itemId", item.getId());
				obj.put("itemName", item.getTitle());
				obj.put("barCode", item.getBarCode());
				User user=this.userservice.getUser(item.getUserid());
				obj.put("userName", user!=null?user.getShopName():"");
				mapList.add(obj);
			}
			resultMap.put("list", mapList);
			resultMap.put("code", "200");
		} catch (Exception e) {
			e.printStackTrace();
			resultMap.put("code", "500");
			resultMap.put("error", e.getMessage());
		}
		return resultMap;

	}

	private static SimpleDateFormat dateFormater = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

	/**
	 * 构建卡位
	 * 
	 * @param list
	 * @return
	 */
	private List<Map<String, Object>> buildLocalPlate(List<LocalPlate> localPlatelist,boolean isBoxOut) {

		List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();

		for (LocalPlate localPlate : localPlatelist) {
			Map<String, Object> obj = new HashMap<String, Object>();
			obj.put("id", localPlate.getId());
			obj.put("num", localPlate.getNum());
			obj.put("code", localPlate.getCode());
			String date = dateFormater.format(localPlate.getLastUpdateDate());
			obj.put("date", date);
			obj.put("state", localPlate.getState()==null?"":localPlate.getState());
			Item itemTemp = localPlate.getItem();
			if (itemTemp != null) {
				Item item = itemService.getItem(itemTemp.getId());
				User user=this.userservice.getUser(item.getUserid());
				obj.put("shopName", user.getShopName());
				obj.put("itemId", item.getId());			
				obj.put("itemCode", item.getCode());
				obj.put("itemName", item.getTitle());
			} else {
				obj.put("itemId", "");
				obj.put("itemCode", "");
				obj.put("itemName", "");
				obj.put("shopName", "");
			}
			if(isBoxOut){
				LocalBoxOut boxOut = localPlate.getBoxOut();
				List<LocalBoxOut> lists = localService.getLocalBoxOutById(""+boxOut.getId());
				if(lists!=null  &&  lists.size()>0){
					boxOut = lists.get(0);
					obj.put("row", boxOut.getRow());
					obj.put("floor", boxOut.getFloor());
					obj.put("boxOut", boxOut.getBoxOut());
				}
			}
			list.add(obj);
		}
		return list;
	}

	/**
	 * 上架
	 * 
	 * @return
	 */
	@RequestMapping(value = "upLocalPlate/{localPlateId}/{itemId}/{num}")
	@ResponseBody
	public Map<String, Object> upLocalPlate(@PathVariable("localPlateId") int localPlateId,
			@PathVariable("itemId") int itemId, @PathVariable("num") int num) {
		Map<String, Object> retMap = localService.upLocalPlate(localPlateId, itemId, num);

		return retMap;
	}

	/**
	 * 下架
	 * 
	 * @return
	 */
	@RequestMapping(value = "downLocalPlate/{localPlateId}")
	@ResponseBody
	public Map<String, Object> downLocalPlate(@PathVariable("localPlateId") int localPlateId) {

		Map<String, Object> retMap = localService.downLocalPlate(localPlateId);

		return retMap;
	}

	@RequestMapping(value = "getRows")
	@ResponseBody
	public Map<String, Object> getRows() {
		Map<String, Object> retMap = localService.getRows();
		return retMap;
	}

}
