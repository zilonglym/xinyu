package com.graby.store.admin.web;

import java.io.IOException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.json.JSONArray;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.graby.store.admin.web.shiporder.AdminTradeController;
import com.graby.store.base.StoreConstants;
import com.graby.store.entity.Centro;
import com.graby.store.entity.ShipOrder;
import com.graby.store.entity.Trade;
import com.graby.store.entity.User;
import com.graby.store.remote.CentroRemote;
import com.graby.store.remote.ShipOrderRemote;
import com.graby.store.remote.TradeRemote;
import com.graby.store.remote.UserRemote;
import com.graby.store.remote.WayBillRemote;

@Controller
@RequestMapping(value = "waybill")
public class WaybillController extends BaseController{
	
	private static Logger logger = LoggerFactory.getLogger(WaybillController.class);

	@Autowired
	private TradeRemote tradeRemote;

	@Autowired
	private ShipOrderRemote shipOrderRemote;

	@Autowired
	private CentroRemote centroRemote;

	@Autowired
	private UserRemote userRemote;
	
	@Autowired
	private WayBillRemote wayBillRemote;
	
	@RequestMapping(value="test")
	public String test(){
		logger.info("logger.info");
		logger.debug("logger.debug");
		logger.error("logger.error");
		logger.warn("logger.warn");
		logger.trace("logger.trace");
		System.err.println("syserr");
		System.out.println("sysout");
		Trade trade=this.tradeRemote.getTrade(Long.valueOf("25634")); 
		return "";
	}

	/**
	 * 顺丰电子面单打印异步调用的实现
	 * @return
	 */
	@RequestMapping(value="sfAjax")
	public String sfAjax(ModelMap model){
		String idsObj=this.getString("ids");
		String cpCode=this.getString("cpCode");
		model.put("ids", idsObj);
		model.put("cpCode", cpCode);
		return "waybill/sf_ajax";
	}
	
	
	/**
	 * 异步批量取菜鸟面单号,返回具体的打印数据
	 * 
	 */
	@RequestMapping(value = "getPrintAjax")
	@ResponseBody
	public Map<String, Object> getPrintAjax(HttpServletRequest request, HttpServletResponse response, ModelMap model){
		String idsObj =(String) request.getParameter("ids");
		Date date=new Date();
		//String cp_code = (String)request.getParameter("cpCode");
		Map<String,Object> resultMap=new HashMap<String, Object>();
		/**
		 * 调用接口去取订单号，这里应该考虑一个问题。如果有一个订单取不到订单号，应该整批都不能进行打印。并且还需要给出具体的提示
		 * 修改为批量的取订单，用事务完成这一功能。
		 */
	
		if (idsObj != null) {
			String[] ids = idsObj.split(",");
			try{
				resultMap=this.wayBillRemote.getSFBillNo(ids);
			}catch(Exception e ){
				/**
				 * 异常，描述出这批异常单据的具体情况。写出来
				 */
				Trade trade=this.tradeRemote.getTrade(Long.valueOf(ids[0])); 
				Trade trade_end=this.tradeRemote.getTrade(Long.valueOf(ids[ids.length]));
				resultMap.put("msg",trade.getReceiverName()+"-"+trade_end.getReceiverName()+"没有取得运单号!["+ids+"]");
				resultMap.put("code", 500);
				
			}
		}
		if(resultMap!=null && String.valueOf(resultMap.get("code")).equals("200") ){
			/**
			 * 取完订单号，查询构建数据进行打印
			 */
			List<Map<String, String>> tradeList = new ArrayList<Map<String,String>>();
			buildSfPrintData(idsObj.split(","), tradeList);
			resultMap.put("data", tradeList);
			resultMap.put("code",200);
			logger.debug("面单打印:此批单据取号所花时间:"+(new Date().getTime()-date.getTime()));
		}else{
			resultMap.put("code", 500);
		}
		return resultMap;
	}
	
	/**
	 * 顺丰电子面单打印
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 * @throws Exception
	 * @throws IOException
	 */
	@RequestMapping(value = "sfpreview")
	public String sfpreview(HttpServletRequest request, HttpServletResponse response, Model model)
			throws Exception, IOException {
		Object idsObj = request.getParameter("ids");
		String type=request.getParameter("type");
		if (idsObj != null) {
			String[] ids = ("" + idsObj).split(",");
			List<Map<String, String>> tradeList = new ArrayList<Map<String,String>>();
			JSONArray array = buildSfPrintData(ids, tradeList);
			model.addAttribute("tradeList", tradeList);
			model.addAttribute("data", array);
			
		}
		if(type!=null && type.equals("print")){
			return "waybill/sf_new";
		}else{
			return "waybill/sf_isv";
		}
	}


	private JSONArray buildSfPrintData(String[] ids, List<Map<String, String>> tradeList) {
		JSONArray array=new JSONArray();
		for (int i = 0, size = ids.length; i < size; i++) {
			Trade trade = tradeRemote.getTrade(new Long(ids[i]));
			ShipOrder sendShipOrder = shipOrderRemote.getSendShipOrderByTradeId(trade.getId());
			if(sendShipOrder.getExpressOrderno()==null || sendShipOrder.getExpressOrderno().length()==0){
				//判断，如果订单号为空，则不输出打前台
				continue;
			}
			Centro centro = centroRemote.getCentroById(Integer.valueOf(""+trade.getCentro().getId()));
			User user = userRemote.getUser(trade.getUser().getId());
			String address = trade.getReceiverState() + "," + trade.getReceiverCity() + ","
					+ trade.getReceiverDistrict();
			String address1 = trade.getReceiverState() + trade.getReceiverCity() +
					trade.getReceiverDistrict()+trade.getReceiverAddress();
			String name = trade.getReceiverName() + " "
					+ (trade.getBuyerNick() == null ? "" : trade.getBuyerNick());
			String phone = trade.getReceiverMobile() + " "
					+ (trade.getReceiverPhone() == null ? "" : trade.getReceiverPhone());
			
			Map<String, String> map = new HashMap<String, String>();
			//JSONObject json=new JSONObject();
			
		    //上方运单号 条形码
//		   	    LODOP.ADD_PRINT_BARCODE(65,80,161,50,"128C","444 835 934 440");
			map.put("sf_orderno", sendShipOrder.getExpressOrderno());
			
			map.put("sf_selforderno", sendShipOrder.getOrderno());
		    //目的地
			map.put("sf_destcode", sendShipOrder.getSellerPhone());
			
			DecimalFormat df=new DecimalFormat("######0.00");
			map.put("weight", sendShipOrder.getTotalWeight()==null?"0":df.format(sendShipOrder.getTotalWeight())+"KG");
			
		    //收货地址
			map.put("sf_destaddress", address);
			 //详细地址
			map.put("sf_destdetailaddress", address1);
		    
		    //收货人  和 收货电话号码
			map.put("sf_destname", name+" "+phone);
			
			SimpleDateFormat smf  = new SimpleDateFormat("MM月dd日");
			String format = smf.format(new Date());
			
			map.put("sf_date", format);
		    //代收货款
		    //卡号
		    //运费
		    //费用合计
			//寄件信息
			String  caddres =  centro.getProvince()+centro.getCity()+centro.getArea();
			String detailAddress  = centro.getSfAddress().replaceAll(caddres, "");
			map.put("sf_sellername", user.getShopName()+" "+user.getCode()!=null ?user.getCode():"" );
			map.put("sf_selleraddress", caddres);
			map.put("sf_sellerdetailaddress", detailAddress);
			  //目的地
			map.put("sf_sellercode", sendShipOrder.getSellerMobile());
		    //下收方信息
			if (sendShipOrder.getCreateUser().getId()!=28) {
				map.put("sf_selleritems", sendShipOrder.getItems());
			}else {
				map.put("sf_selleritems", sendShipOrder.getItems()+"备注："+(sendShipOrder.getSellerMemo()!=null ?sendShipOrder.getSellerMemo():"" )+(sendShipOrder.getSellerMessage()!=null ?sendShipOrder.getSellerMessage():"" ));
			}
		    
		    //原寄地CODE
			tradeList.add(map);
			array.put(map);
		}
		return array;
	}
	
	/**
	 * 快递打印
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 * @throws Exception
	 * @throws IOException
	 */
	@RequestMapping(value = "preview")
	public String preview(HttpServletRequest request, HttpServletResponse response, Model model)
			throws Exception, IOException {
		Object idsObj = request.getParameter("ids");
		String type=request.getParameter("type");
		SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		boolean  tradeBatchFlag  =  false;
		
		if (idsObj != null) {
			String[] ids = ("" + idsObj).split(",");
			List<Map<String, String>> tradeList = null;
			for (int i = 0, size = ids.length; i < size; i++) {
				Trade trade = tradeRemote.getTrade(new Long(ids[i]));
				ShipOrder sendShipOrder = shipOrderRemote.getSendShipOrderByTradeId(trade.getId());
				if(i==0  && "SF".equals(sendShipOrder.getExpressCompany())){
					if(type==null || type.trim().length()==0){
						return "redirect:sfpreview?ids="+idsObj;
					}else{
						return "redirect:sfpreview?type=print&ids="+idsObj;
					}
				}
					
				
				if(!tradeBatchFlag && sendShipOrder.getTradeBatchId()!=null){
					tradeBatchFlag  = true;
				}
				Centro centro = centroRemote.getCentroById(Integer.valueOf("" + trade.getCentro().getId()));

				User user = userRemote.getUser(trade.getUser().getId());
				String address = trade.getReceiverState() + " " + trade.getReceiverCity() + " "
						+ trade.getReceiverDistrict() + " " + trade.getReceiverAddress();
				address=this.getHtml(address);
				String name = trade.getReceiverName() ;
				String phone = trade.getReceiverMobile() + " "
						+ (trade.getReceiverPhone() == null ? "" : trade.getReceiverPhone());
				String goodsInfoItems=sendShipOrder.getItems();
				if (sendShipOrder.getCreateUser().getId()==28) {
					goodsInfoItems=goodsInfoItems+" 备注："+(sendShipOrder.getSellerMemo()!=null ?sendShipOrder.getSellerMemo():"" )+(sendShipOrder.getSellerMessage()!=null ?sendShipOrder.getSellerMessage():"" );
				}
				if (i == 0) {
					model.addAttribute("user_id", userRemote.getUser(trade.getUser().getId()).getTbUserId());
					model.addAttribute("app_key", StoreConstants.rookie_appkey);

					model.addAttribute("cp_code", sendShipOrder.getExpressCompany()); // 选择快递末班公司
					//EMS 的EYB是经济快递，其它都为标准快递
					if(sendShipOrder.getExpressCompany().equals("EYB")){
						model.addAttribute("ali_waybill_product_type", "经济快递");// 单据类型
						model.addAttribute("ali_waybill_package_center_name", "6283   "+sendShipOrder.getSellerMobile());// 集散地名称
					}else{
						if(sendShipOrder.getExpressCode()!=null && sendShipOrder.getExpressCode().length()>0){
							model.addAttribute("ali_waybill_product_type", sendShipOrder.getExpressCode()+" 汽运");// 单据类型
						}else{
							model.addAttribute("ali_waybill_product_type", "汽运");// 单据类型
						}
						model.addAttribute("ali_waybill_package_center_name", sendShipOrder.getSellerMobile());// 集散地名称
					}
					model.addAttribute("ali_waybill_package_center_code", sendShipOrder.getSellerPhone());//集散地代码（卖家电话）
					model.addAttribute("ali_waybill_waybill_code", sendShipOrder.getExpressOrderno());//快递代码（物流单号）
					model.addAttribute("ali_waybill_short_address", sendShipOrder.getOrderFlag());
					
					model.addAttribute("ali_waybill_package_center_code", sendShipOrder.getSellerPhone());
					model.addAttribute("ali_waybill_waybill_code", sendShipOrder.getExpressOrderno());
					// model.addAttribute("ali_waybill_cod_amount",
					// "FKFS=到付;");// 服务
					model.addAttribute("ali_waybill_consignee_name", name);//收件人姓名
					model.addAttribute("ali_waybill_consignee_phone", phone);//收件人手机
					model.addAttribute("ali_waybill_consignee_address", address.replaceAll("/", "").replaceAll("\"", "").replaceAll("\\\\","").replaceAll("\'", ""));// 收件人地址
					//model.addAttribute("ali_waybill_consignee_address", address);// 收件人地址
					model.addAttribute("ali_waybill_send_name", user.getShopName());//发件人姓名（店铺名）
					model.addAttribute("ali_waybill_send_phone", user.getCode());//发件人手机（客户编码）
					model.addAttribute("ali_waybill_shipping_address", "湖南省湘潭市岳塘区电子商务物流园   "+sdf.format(new Date())+"[大客户本人签收送货上门礼貌投递]");//发件地址（仓库地址）
					model.addAttribute("goodsInfos", "[1]"+goodsInfoItems+"    汽运");//商品明细信息

				} else {
					if (tradeList == null) {
						tradeList = new ArrayList<Map<String, String>>();
					}
					Map<String, String> map = new HashMap<String, String>();
					//EMS 的EYB是经济快递，其它都为标准快递
					if(sendShipOrder.getExpressCompany().equals("EYB")){
						map.put("ali_waybill_product_type", "经济快递");// 单据类型
						map.put("ali_waybill_package_center_name", "6283   "+sendShipOrder.getSellerMobile());// 集散地名称
					}else{
						if(sendShipOrder.getExpressCode()!=null && sendShipOrder.getExpressCode().length()>0){
							map.put("ali_waybill_product_type", sendShipOrder.getExpressCode()+" 汽运");// 单据类型
						}else{
							map.put("ali_waybill_product_type", "汽运");// 单据类型
						}
						map.put("ali_waybill_package_center_name", sendShipOrder.getSellerMobile());// 集散地名称
					}
					
					//map.put("ali_waybill_product_type", "标准快递");// 单据类型
					map.put("ali_waybill_short_address", sendShipOrder.getOrderFlag());
				//	map.put("ali_waybill_package_center_name", sendShipOrder.getSellerMobile());// 集散地名称
					map.put("ali_waybill_package_center_code", sendShipOrder.getSellerPhone());
					map.put("ali_waybill_waybill_code", "" + sendShipOrder.getExpressOrderno());
					// map.put("ali_waybill_cod_amount", "FKFS=到付;");// 服务
					map.put("ali_waybill_consignee_name", name);
					map.put("ali_waybill_consignee_phone", phone);
					map.put("ali_waybill_consignee_address", address.replaceAll("/", "").replaceAll("\"", "").replaceAll("\\\\","").replaceAll("\'", ""));// 收件人地址
					//map.put("ali_waybill_consignee_address", address);// 收件人地址
					map.put("ali_waybill_send_name", user.getShopName());
					map.put("ali_waybill_send_phone", user.getCode());
				//	map.put("ali_waybill_shipping_address", centro.getAddress()+"   "+sdf.format(new Date()));
					map.put("ali_waybill_shipping_address","湖南省湘潭市岳塘区电子商务物流园   "+sdf.format(new Date())+"[大客户本人签收送货上门礼貌投递]");
					map.put("goodsInfos", "["+(i+1)+"]"+goodsInfoItems +"    汽运");
					tradeList.add(map);
				}

			}

			if (tradeList != null) {
				if(tradeBatchFlag){ //更新 批次
					
				}
				model.addAttribute("tradeList", tradeList);
			}
		}
		if(type==null || type.trim().length()==0){
			return "waybill/yunda_isvPreview";
		}else{
			return "waybill/cainiao_new";
		}
		
	}

	/**
	 * 获取菜鸟面单 号
	 * Map key tradeId 订单ID orderNo 面单号
	 */
	@RequestMapping(value = "ajax/getPrint")
	@ResponseBody
	public Map<String, Object> getPrint(HttpServletRequest request, HttpServletResponse response, ModelMap model) {
		Object idsObj = request.getParameter("ids");
		String cp_code = "" + request.getParameter("cp_code");
		List<Map<String, String>> retList = new ArrayList<Map<String, String>>();
		if (idsObj != null) {
			String[] ids = ("" + idsObj).split(",");
			for (int i = 0, size = ids.length; i < size; i++) {
				Trade trade = tradeRemote.getTrade(new Long(ids[i]));
				if (!"SF".equals(cp_code)) {
					Map<String, String> getMap = wayBillRemote.billGet(trade, cp_code);
					if(!"getMap".equals("200")){
						retList.add(getMap);
					}
				} else {
					try{
						retList.add(wayBillRemote.billSfGet(trade));
					}catch(Exception e){
						e.printStackTrace();
						logger.debug(e.getMessage());
					}
				}
			}
		}
		Map<String, Object> retMap = new HashMap<String, Object>();
		retMap.put("retList", retList);
		System.err.println("取订单号:"+retList);
		return retMap;
	}

	/**
	 * 取消电子面单
	 */
	@RequestMapping(value = "ajax/cancel")
	@ResponseBody
	public Map<String, Object> cancel(HttpServletRequest request, HttpServletResponse response, Model model)
			throws Exception, IOException {
		Object idsObj = request.getParameter("ids");
		List<Map<String, String>> retList = new ArrayList<Map<String, String>>();
		if (idsObj != null) {
			String[] ids = ("" + idsObj).split(",");
			for (int i = 0, size = ids.length; i < size; i++) {
				Trade trade = tradeRemote.getTrade(new Long(ids[i]));
				retList.add(wayBillRemote.billCancel(trade));
			}
		}
		Map<String, Object> retMap = new HashMap<String, Object>();
		retMap.put("retList", retList);
		System.err.println("订单取消:"+retList);
		return retMap;
	}
	/**
	 * 查询快递单状态
	 * @param request
	 * @param model
	 * @return
	 */
	@RequestMapping(value="queryDetail")
	public Map<String,Object> queryDetail(HttpServletRequest request,ModelMap model){
		String code=request.getParameter("code");
		Map<String,Object> resultMap=new HashMap<String, Object>();
		resultMap.putAll(wayBillRemote.queryDetail(code));
		resultMap.put("ret", 1);
		return resultMap;
	}
	/**
	 * 格式化地址
	 * @param str
	 * @return
	 */
	public String getHtml(String str){
		if(str!=null && str.length()>0){
			str=str.replaceAll("(\r\n|\r|\n|\n\r)", "");
			if(str.indexOf("\"")>0){
				str=str.replaceAll("\"", "");
			}
			if(str.indexOf("'")>0){
				str=str.replaceAll("'", "");
			}
			return str;
		}
		return null;
	}
}
