package com.xinyu.check.controller;

import java.io.UnsupportedEncodingException;
import java.util.Collections;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import com.xinyu.check.util.MemcachedManagerDemo;
import com.xinyu.check.util.ObjectTranscoder;
import com.xinyu.check.util.RedisUtil;

import redis.clients.jedis.Jedis;
import redis.clients.jedis.ShardedJedis;
import redis.clients.jedis.ShardedJedisPool;
import redis.clients.jedis.exceptions.JedisDataException;
import redis.clients.jedis.exceptions.JedisException;
import redis.clients.util.SafeEncoder;

@Controller
@RequestMapping(value = "redis")
public class RedisController extends BaseController {

	public static final Logger logger = Logger.getLogger(RedisController.class);
	@Autowired
	private ShardedJedisPool shardedJedisPool;
<<<<<<< .mine
	
	static Jedis client = RedisUtil.getJedis();
	@RequestMapping(value="index")
	public void springT(){
=======

	@RequestMapping(value = "index")
	public void springT() {
>>>>>>> .r2716
		ShardedJedis jedis = shardedJedisPool.getResource();
		jedis.set("name", "test");

		System.err.println(jedis.get("name"));
	}

	public static void main(String[] args) throws Exception {
<<<<<<< .mine
		//{zpIndex=120, zcIndex=1, 2902082140620=1, 6940971207081=1}
		String orderCode="887653306582604355";
//		String keyValue="20170920Check_out_db"+orderCode+"*";
		String itemKey="*Check_out_history_db*";
		//连接本地的 Redis 服务
        Jedis jedis = RedisUtil.getJedis();
        System.out.println("连接成功");
        //查看服务是否运行
        Set<String> itemKeys=jedis.keys(itemKey);
        System.err.println(itemKeys.size());
//       System.err.println(itemKeys);
//       String kk=itemKeys.iterator().next();
//       System.err.println(itemKeys.size());
//      Map<String,String> map= (Map<String, String>) ObjectTranscoder.deserialize(jedis.get(itemKey.getBytes("utf-8")));
//      System.err.println(map);
        orderInfo(orderCode);
=======
		// {zpIndex=120, zcIndex=1, 2902082140620=1, 6940971207081=1}
		String orderCode = "9891297785185";
		// String keyValue="20170920Check_out_db"+orderCode+"*";
		// String keyValue="2017-12-10CheckOut*";
		int v = 20171016;
		String keyValue = "success_record*";
		String historyKey = "20170920Check_out_history_db" + orderCode + "*";
		// 连接本地的 Redis 服务
		Jedis jedis = RedisUtil.getJedis();
		System.out.println("连接成功");
		// 查看服务是否运行
		System.err.println(jedis.keys(keyValue).size());
//		deleteInfo(jedis);

		 orderInfo(keyValue);
>>>>>>> .r2716
//        returnOrderInfo(orderCode);
//       deleteItemInfo(itemKeys,jedis);
	}
<<<<<<< .mine
	
	
	
	private static  void  orderInfo(String orderCode){
=======

	private static void orderInfo(String keyValue) {
>>>>>>> .r2716
		Jedis jedis = RedisUtil.getJedis();
		System.err.println("-------------");
<<<<<<< .mine
		Map<String,Object> map=(Map<String, Object>) ObjectTranscoder.deserialize(jedis.get(orderCode.getBytes()));
=======
		MemcachedManager manager = new MemcachedManager();
		Set<String> sets=jedis.keys(keyValue);
		int i=0;
		for (Iterator<String> iterator = sets.iterator(); iterator.hasNext();) {
			String k=iterator.next();
			jedis.del(k);
			System.err.println(k);
			i++;
			if(i==10000){
				break;
			}
		}
		
>>>>>>> .r2716
<<<<<<< .mine
		System.err.println(map);
	}

	
	private static  void  returnOrderInfo(String orderCode){
		Jedis jedis = RedisUtil.getJedis();
		System.err.println("-------------");
		String key="Return"+orderCode;
		
		Map<String,Object> map=(Map<String, Object>) ObjectTranscoder.deserialize(jedis.get(key.getBytes()));
		System.err.println(map);
=======
>>>>>>> .r2716
	}
	private static void deleteInfo(Jedis jedis) {

		int v = 20171101;
		String keyValue = "CheckOut*";
		for (int i = 0; i < 30; i++) {
			v++;
			String value = String.valueOf(v) + keyValue;
			Set<String> jedisSet = jedis.keys(value);
			System.err.println(value+"||"+jedisSet.size());
			for (Iterator<String> iterator = jedisSet.iterator(); iterator.hasNext();) {
				String key=iterator.next();
				Map<String, String> map=(Map<String, String>) ObjectTranscoder.deserialize(jedis.get(key.getBytes()));
//				logger.error(key);
//				System.err.println(key+"||"+map);
				jedis.del(key);
			}
		}
	}
	
	private static void deleteItemInfo(Set<String> itemKeys,Jedis jedis) throws Exception{
		int i=0;
		for(Iterator<String> iterator=itemKeys.iterator();iterator.hasNext();){
			String key=iterator.next();
			System.err.println(i+"|"+key);
			i++;
			jedis.del(key.getBytes());
		}
		
	}
	
	
	
	
	
	
}
