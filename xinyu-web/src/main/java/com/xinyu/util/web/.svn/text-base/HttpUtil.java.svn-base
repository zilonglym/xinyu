package com.xinyu.util.web;

import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.codec.binary.Base64;
import org.apache.log4j.Logger;

import com.xinyu.service.common.Constants;
import com.xinyu.service.util.HttpClientUtils;




public class HttpUtil {

	public static final Logger logger = Logger.getLogger(HttpUtil.class);
	
	
	
	private static String secretKey=Constants.cainiao_secretKey;
	private static String appKey=Constants.cainiao_appKey;
	private static String url="http://link.cainiao.com/gateway/link.do";
//	private static String url="http://pac.partner.taobao.com/gateway/mock.do?key=pactrue";
//	private static String appKey="SANDBOX-198831";
//	private static String secretKey="W7H2B2eU5DOaNq703fY7PHVz0I0e98wu";
	/**
	 * 提交奇门的发送请求
	 * @param xmlStr XML格式的参数体
	 * @param method 调用方法
	 * @return
	 */
	public static String submitLogist(String xmlStr){
	
		String url=getLogistUrl();//组装URL
//		String md5 = sign(url, xmlStr, secretKey);//计算答名
		String md5 = doSign(xmlStr, "UTF-8", secretKey);
		String tempUrl="";
		StringBuffer buf=new StringBuffer();
		buf.append("&msg_type=LPC_PACK_PUB_QUERY")
		.append("&to_code=LD-PACKPUSH")
		.append("&logistic_provider_id=")
		.append(appKey);
//		tempUrl+="&logistics_interface="+xmlStr;
//		tempUrl+="&data_digest="+md5;//组装签名
//		buf.append(tempUrl);
		
		url=url+URLEncoder.encode(buf.toString());
//	    url = url.replaceAll(" ", "%20");
	    System.err.println(url);
		String resultStr="";
		try{
			logger.error("xmlStr:"+xmlStr);
			resultStr=HttpClientUtils.httpPost(url, xmlStr);
			System.err.println("返回:"+resultStr);
		}catch(Exception e){
			resultStr="";
			System.err.println(e.getMessage());
			e.printStackTrace();
			
		}
		/**
		 * 这里对结果进行判断处理，返回想要的数据或map
		 */
		return resultStr;
	}
	
	
	/**
	 * 获取请求奇门URL
	 * @param method
	 * @return
	 */
	private static String getLogistUrl(){
		SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		StringBuilder urlStr=new StringBuilder();
		urlStr.append(url);
			
		return urlStr.toString();
	}
	
	
	
	
	public static String doSign(String content, String charset, String keys) {
        String sign = "";
        content = content + keys;
        try {

            MessageDigest md = MessageDigest.getInstance("MD5");
            md.update(content.getBytes(charset));
            sign = new String(Base64.encodeBase64(md.digest()), charset);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        return sign;
    }
	
	/***
	 * 签名
	 * @param url
	 * @param body
	 * @param secretKey
	 * @return
	 */
	public static String sign(String url, String body, String secretKey) {
		Map<String, String> params = getParamsFromUrl(url);
        // 1. 第一步，确保参数已经排序

        String[] keys = params.keySet().toArray(new String[0]);

        Arrays.sort(keys);
        // 2. 第二步，把所有参数名和参数值拼接在一起(包含body体)

        String joinedParams = joinRequestParams(params, body, secretKey, keys);

        //your_secretKeyapp_keyyour_appkeycustomerIdyour_customerIdformatxmlmethodyour_methodsign_methodmd5timestamp2015-04-26 00:00:07vyour_versionyour_bodyyour_secretKey

        System.out.println(joinedParams);

        // 3. 第三步，使用加密算法进行加密（目前仅支持md5算法）

        String signMethod = params.get("sign_method");

        if (!"md5".equalsIgnoreCase(signMethod)) {
            //TODO
            return null;

        }
        byte[] abstractMesaage = digest(joinedParams);
        // 4. 把二进制转换成大写的十六进制

        String sign = byte2Hex(abstractMesaage);
        return sign;
	}
	
	
	private static Map<String, String> getParamsFromUrl(String url) {

        Map<String, String> requestParams = new HashMap<String, String>();

        try {

            String fullUrl = URLDecoder.decode(url, "UTF-8");

            String[] urls = fullUrl.split("\\?");

            if (urls.length == 2) {

                String[] paramArray = urls[1].split("&");

                for (String param : paramArray) {

                    String[] params = param.split("=");

                    if (params.length == 2) {

                        requestParams.put(params[0], params[1]);

                    }

                }

            }

        } catch (UnsupportedEncodingException e) {

            // TODO

        }

        return requestParams;

    }

 

    private static String byte2Hex(byte[] bytes) {

        char hexDigits[] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };

        int j = bytes.length;

        char str[] = new char[j * 2];

        int k = 0;

        for (byte byte0 : bytes) {

            str[k++] = hexDigits[byte0 >>> 4 & 0xf];

            str[k++] = hexDigits[byte0 & 0xf];

        }

        return new String(str);

    }

 

    private static byte[] digest(String message)  {

        try {

            MessageDigest md5Instance = MessageDigest.getInstance("MD5");

            md5Instance.update(message.getBytes("UTF-8"));

            return md5Instance.digest();

        } catch (UnsupportedEncodingException e) {

            //TODO

            return null;

        } catch (NoSuchAlgorithmException e) {

            //TODO

            return null;

        }

    }

 

    private static String joinRequestParams(Map<String, String> params, String body, String secretKey, String[] sortedKes) {

        StringBuilder sb = new StringBuilder(secretKey); // 前面加上secretKey

 

        for (String key : sortedKes) {

            if ("sign".equals(key)) {

                continue; // 签名时不计算sign本身

            } else {

                String value = params.get(key);

                if (isNotEmpty(key) && isNotEmpty(value)) {

                    sb.append(key).append(value);

                }

            }

        }

        sb.append(body); // 拼接body体

        sb.append(secretKey); // 最后加上secretKey

        return sb.toString();

    }

 

    private static boolean isNotEmpty(String s) {

        return null != s && !"".equals(s);

    }

}
